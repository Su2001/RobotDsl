// automatically generated by Xtext
grammar org.xtext.example.mydsl1.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/project2" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

RobotModel returns RobotModel:
	{RobotModel}
		((events+=Event)|
		('Action:' '-' actions+=Action ('-' actions+=Action)*) |
		('Condition:' '-'  conditions+=Condition ('-' conditions+=Condition)*) |
		(expressions+=Expression) )*
;

Expression returns Expression:
	PlusOrMinus 
;

// left associative	
PlusOrMinus returns Expression:
	MultOrDiv (
		({Expression.left=current} operation=('+'| '-'))
		right=MultOrDiv)* ;

MultOrDiv returns Expression:
	Primary 
		({Expression.left=current} operation=('*'|'/')
		right=Primary)* ;

Primary returns Expression:
	'(' Expression ')' |
	Atomic;
	
Atomic returns Expression:
	{Expression} (value=EInt)
;

Event returns Event:
	{Event}
	'Event'
	name=EString
		('conditions:' conditions+=[Condition|EString] ('and' conditions+=[Condition|EString])* )
		('actions:'  actions+=[Action|EString] ( "," actions+=[Action|EString])*  )
	;
	
Condition returns Condition:
	 Button | Sensor | Sound | Tap;	
	 
Sound returns Sound:
	{Sound}
	'Sound'
	conditionname=EString
;	

Button returns Button:
	{Button}
	'Button'
	conditionname=EString
	button=ButtonType
;

Sensor returns Sensor:
	{Sensor}
	'Sensor'
	conditionname=EString
	'sensorPosition' posEx=Expression
	'detectObstacle' distance=Distance
; 

Tap returns Tap:
	{Tap}
	'Tap'
	conditionname=EString
;

Action returns Action:
	 MotorAction | SoundAction | LightAction;

MotorAction returns MotorAction:
	{MotorAction}
	'MotorAction'
	actionname=EString
		('motorLeft' (left=Expression))?
		('motorRight' (right=Expression))?
;

SoundAction returns SoundAction:
	{SoundAction}
	'SoundAction'
	actionname=EString
	('set:' musicsettings+=MusicSetting (',' musicsettings+=MusicSetting)*)
;
	
LightAction returns LightAction:
	{LightAction}
	'LightAction'
	actionname=EString
	'position:' pos=LightPos
	('red:' redEx=Expression)?
	('green:' greenEx=Expression)?
	('blue:' blueEx=Expression)?
;

MusicSetting returns MusicSetting:
	{MusicSetting}
	'(' noteEx=Expression ',' duration=Duration ',' posEx=Expression')'
;

EInt returns ecore::EInt:
	'-'? INT;

EString returns ecore::EString:
	STRING | ID;

enum Duration returns Duration:
	NONE = 'NONE' | MEDIUM = 'MEDIUM' | LONG = 'LONG'
;

enum LightPos returns LightPos:
	TOP = 'TOP' | BOT = 'BOT'
;

enum Distance returns Distance:
	FAR = 'OBSTACLE' | CLOSE = 'NOOBSTACLE'
;

enum ButtonType returns ButtonType:
				BACKWARD = 'BACKWARD' | LEFT = 'LEFT' | RIGHT = 'RIGHT' | CENTER = 'CENTER' | FORWARD = 'FORWARD';

