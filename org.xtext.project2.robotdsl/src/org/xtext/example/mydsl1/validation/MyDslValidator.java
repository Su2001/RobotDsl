/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.mydsl1.validation;

import java.util.ArrayList;

import java.util.List;

import org.eclipse.xtext.validation.Check;

import project2.Action;
import project2.Button;
import project2.ButtonType;
import project2.Condition;
import project2.Event;
import project2.Expression;
import project2.LightAction;
import project2.MotorAction;
import project2.MusicSetting;
import project2.Project2Package;
import project2.RobotModel;
import project2.Sensor;
import project2.Sound;
import project2.SoundAction;
import project2.Tap;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class MyDslValidator extends AbstractMyDslValidator {
	
	
	public static final String SAME_ACTION_TYPE = "Can't add two same actions";

	@Check
	public void checkActions(Event event) {
		boolean[] flags= new boolean[3];
		for(Action a : event.getActions()) {
			int pos = 0;
			if(a instanceof LightAction) {
				pos = 2;
			}else if(a instanceof SoundAction) {
				pos = 1;
			}
			if(flags[pos]) {
				error("cant add two same action type",
						event,
						Project2Package.eINSTANCE.getEvent_Actions(),
						SAME_ACTION_TYPE);
			}else {
				flags[pos] = true;
			}
		}
	}
	
	public static final String SAME_NAME = "Can't be same name";

	@Check
	public void checkNames(RobotModel rm) {
		for(Action a : rm.getActions()) {
			for(Condition c : rm.getConditions()) {
				if(a.getActionname().equals(c.getConditionname())) {
					error("cant declare instances with same name",
							a,
							Project2Package.eINSTANCE.getAction_Actionname(),
							SAME_NAME);
					error("cant declare instances with same name",
							c,
							Project2Package.eINSTANCE.getCondition_Conditionname(),
							SAME_NAME);
				}
			}
			for(Event e : rm.getEvents()) {
				if(a.getActionname().equals(e.getName())) {
					error("cant declare instances with same name",
							a,
							Project2Package.eINSTANCE.getAction_Actionname(),
							SAME_NAME);
					error("cant declare instances with same name",
							e,
							Project2Package.eINSTANCE.getNamedElement_Name(),
							SAME_NAME);
				}
			}
			for(Action tempa : rm.getActions()) {
				if(a != tempa && a.getActionname().equals(tempa.getActionname())) {
					error("cant declare instances with same name",
							a,
							Project2Package.eINSTANCE.getAction_Actionname(),
							SAME_NAME);
					error("cant declare instances with same name",
							tempa,
							Project2Package.eINSTANCE.getAction_Actionname(),
							SAME_NAME);
				}
			}
		}
		for(Event e : rm.getEvents()) {
			for(Condition c : rm.getConditions()) {
				if(c.getConditionname().equals(e.getName())) {
					error("cant declare instances with same name",
							c,
							Project2Package.eINSTANCE.getCondition_Conditionname(),
							SAME_NAME);
					error("cant declare instances with same name",
							e,
							Project2Package.eINSTANCE.getNamedElement_Name(),
							SAME_NAME);
				}
				for(Event tempe : rm.getEvents()) {
					if(tempe!= e && tempe.getName().equals(e.getName())) {
						error("cant declare instances with same name",
								tempe,
								Project2Package.eINSTANCE.getNamedElement_Name(),
								SAME_NAME);
						error("cant declare instances with same name",
								e,
								Project2Package.eINSTANCE.getNamedElement_Name(),
								SAME_NAME);
					}
				}
			}	
		}
		
		for(Condition c : rm.getConditions()) {
			for(Condition tempc : rm.getConditions()) {
				if(tempc != c &&tempc.getConditionname().equals(c.getConditionname())) {
					error("cant declare instances with same name",
							c,
							Project2Package.eINSTANCE.getCondition_Conditionname(),
							SAME_NAME);
					error("cant declare instances with same name",
							tempc,
							Project2Package.eINSTANCE.getCondition_Conditionname(),
							SAME_NAME);
				}
			}
		}	
	}
	
	public static final String SAME_BUTTON_TYPE = "Can't be same name";
	
	@Check
	public void processEventsCondition(Button e) {
		RobotModel r= (RobotModel)e.eContainer();
		for (Condition c : r.getConditions()) {
			if (e != c && c instanceof Button) {
				if (((Button)c).getButton() == e.getButton()) {
					error("already defined the button type",
							e,
							Project2Package.eINSTANCE.getButton_Button(),
							SAME_BUTTON_TYPE);
				}
			}
		}
	}
	
	public static final String INVALID_SPEED = "the speed exceed the limit";
	
	@Check
	public void checkMotorSpeed(MotorAction ma) {
		int max = 500,
			min = -500;
		if (ma.getRight()!=null && ma.getLeft()!=null) {
			ma.setMotorLeft(processExpression(ma.getLeft()));
			ma.setMotorRight(processExpression(ma.getRight()));
			if(ma.getMotorLeft() < min || ma.getMotorLeft() > max) {
				error("the motor speed can only between " + min +" to " + max + " and now it is " + ma.getMotorLeft(),
						ma,
						Project2Package.eINSTANCE.getMotorAction_Left(),
						INVALID_SPEED);
			}
			if(ma.getMotorRight() < min || ma.getMotorRight() > max) {
				error("the motor speed can only between " + min +" to " + max + " and now it is " + ma.getMotorRight(),
						ma,
						Project2Package.eINSTANCE.getMotorAction_Right(),
						INVALID_SPEED);
			}
		}
		
		
	}
	
	public static final String INVALID_SENSOR_POS = "the sensor position is invalid";
	
	@Check
	public void checkSensor(Sensor s) {
		int max = 9,
			min = 1;
		if (s.getPosEx() != null) {
			s.setSensorPos(processExpression(s.getPosEx()));
			if(s.getSensorPos() < min || s.getSensorPos() > max) {
				error("the sensor position can only between " + min +" to " + max + " and now it is " + s.getSensorPos(),
						s,
						Project2Package.eINSTANCE.getSensor_PosEx(),
						INVALID_SENSOR_POS);
			}
		}
	}
	
	public static final String INVALID_CONDITION = "the contidion cant ";
	public static final String INVALID_SINGULAR_CONDITION = "the contidion cant ";
	
	@Check
	public void checkCondition(Event e) {
		if(e.getConditions().size()>1) {
			if( (e.getConditions().get(0) instanceof Tap || e.getConditions().get(0) instanceof Sound)) {
				error("this condition can only be singular",
						e,
						Project2Package.eINSTANCE.getEvent_Conditions(),
						INVALID_SINGULAR_CONDITION);
			}else {
				Condition c = e.getConditions().get(0);
				for(int i = 1; i < e.getConditions().size(); i++) {
					if(c instanceof Button && !(e.getConditions().get(i) instanceof Button)) {
						error("this condition can only assing with same type of condition",
								e,
								Project2Package.eINSTANCE.getEvent_Conditions(),
								INVALID_CONDITION);
					}else if(c instanceof Sensor &&!(e.getConditions().get(i) instanceof Sensor)) {
						error("this condition can only assing with same type of condition",
								e,
								Project2Package.eINSTANCE.getEvent_Conditions(),
								INVALID_CONDITION);
					}
				}
			}	
		}
		
		
		
		
	}
	
	public static final String INVALID_COLOR = "the color setting cant > 32";
	
	@Check
	public void checkLightColor(LightAction la) {
		int max = 32,
			min = 0;
		if (la.getRedEx() != null ) {
			la.setRed(processExpression(la.getRedEx()));
			if(la.getRed() < min || la.getRed() > max) {
				error("the red value can only being between " + min +" to " + max+ " and now it is " +la.getRed(),
						la,
						Project2Package.eINSTANCE.getLightAction_RedEx(),
						INVALID_COLOR);
			}
		}
		if (la.getBlueEx() != null) {
			la.setBlue(processExpression(la.getBlueEx()));
			if(la.getBlue() < min || la.getBlue() > max) {
				error("the blue value can only being between " + min +" to " + max+ " and now it is " + la.getBlue(),
						la,
						Project2Package.eINSTANCE.getLightAction_BlueEx(),
						INVALID_COLOR);
			}
		}
		if (la.getGreenEx() != null) {
			la.setGreen(processExpression(la.getGreenEx()));
			if(la.getGreen() < min || la.getGreen() > max) {
				error("the green value can only being between " + min +" to " + max+ " and now it is " + la.getGreen(),
						la,
						Project2Package.eINSTANCE.getLightAction_GreenEx(),
						INVALID_COLOR);
			}
		}
	}
	
	public static final String INVALID_SOUND_NOTE = "the sound note cant assign this value";
	public static final String INVALID_SOUND_POS = "the sound position cant assign this value";
	public static final String SAME_SOUND_POS = "this sound position is already defined";
	
	@Check
	public void checkSound(SoundAction sa) {
		int max_note = 5,
			max_pos = 6,
			min = 1;
		List<Integer> li = new ArrayList<>();
		for(MusicSetting m : sa.getMusicsettings()) {
			m.setNote(processExpression(m.getNoteEx()));
			if(m.getNote() < min || m.getNote() > max_note) {
				error("the sound note can only being between " + min +" to " + max_note+ " and now it is " + m.getNote(),
					m,
					Project2Package.eINSTANCE.getMusicSetting_Note(),
					INVALID_SOUND_NOTE);
			}
			m.setPos(processExpression(m.getPosEx()));
			if(m.getPos() < min || m.getPos() > max_pos) {
				error("the sound position can only being between " + min +" to " + max_pos+ " and now it is " + m.getPos(),
					m,
					Project2Package.eINSTANCE.getMusicSetting_Pos(),
					INVALID_SOUND_POS);
			}
			if(li.contains(m.getPos())) {
				error("this sound position is already defined",
						m,
						Project2Package.eINSTANCE.getMusicSetting_Pos(),
						SAME_SOUND_POS);
			}else {
				li.add(m.getPos());
			}
		}
	}
	
	public static final String SAME_TAP = "the tap action is already defined";
	
	@Check
	public void checkTapDeclare(Tap t) {
		RobotModel rModel = (RobotModel) t.eContainer();
		for (Condition c : rModel.getConditions()) {
			if (t != c && c.getClass().equals(t.getClass())) {
				warning("the tap condition is already declared",
						c,
						Project2Package.eINSTANCE.getCondition_Conditionname(),
						SAME_TAP);
			}
		}
	}
	
	public static final String SAME_SOUND = "the sound condition is already defined";
	
	@Check
	public void checkSoundDeclare(Sound s) {
		RobotModel rModel = (RobotModel) s.eContainer();
		for (Condition c : rModel.getConditions()) {
			if (s != c && c.getClass().equals(s.getClass())) {
				warning("the sound condition is already declared",
						c,
						Project2Package.eINSTANCE.getCondition_Conditionname(),
						SAME_SOUND);
			}
		}
	}
	
	
	private int processExpression(Expression e) {
		if (e.getValue() != null) {
			return (int)e.getValue();
		}
		switch (e.getOperation()) {
			case "+": {
				return processExpression(e.getLeft()) + processExpression(e.getRight());
			}
			case "-":{
				return processExpression(e.getLeft()) - processExpression(e.getRight());
			}
			case "*":{
				return processExpression(e.getLeft()) * processExpression(e.getRight());
			}
			case "/":{
				return processExpression(e.getLeft()) / processExpression(e.getRight());
			}
		}
		return -1000;
	}
}
