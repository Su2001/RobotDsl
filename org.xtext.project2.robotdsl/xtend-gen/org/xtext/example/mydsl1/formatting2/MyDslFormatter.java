/**
 * generated by Xtext 2.34.0
 */
package org.xtext.example.mydsl1.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.mydsl1.services.MyDslGrammarAccess;
import project2.Action;
import project2.Condition;
import project2.Event;
import project2.RobotModel;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;

  protected void _format(final RobotModel robotModel, @Extension final IFormattableDocument document) {
    EList<Event> _events = robotModel.getEvents();
    for (final Event event : _events) {
      document.<Event>format(event);
    }
    EList<Action> _actions = robotModel.getActions();
    for (final Action action : _actions) {
      document.<Action>format(action);
    }
    EList<Condition> _conditions = robotModel.getConditions();
    for (final Condition condition : _conditions) {
      document.<Condition>format(condition);
    }
  }

  public void format(final Object robotModel, final IFormattableDocument document) {
    if (robotModel instanceof XtextResource) {
      _format((XtextResource)robotModel, document);
      return;
    } else if (robotModel instanceof RobotModel) {
      _format((RobotModel)robotModel, document);
      return;
    } else if (robotModel instanceof EObject) {
      _format((EObject)robotModel, document);
      return;
    } else if (robotModel == null) {
      _format((Void)null, document);
      return;
    } else if (robotModel != null) {
      _format(robotModel, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(robotModel, document).toString());
    }
  }
}
