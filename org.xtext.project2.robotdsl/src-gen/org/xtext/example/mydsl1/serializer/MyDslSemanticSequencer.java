/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.mydsl1.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl1.services.MyDslGrammarAccess;
import project2.Button;
import project2.Event;
import project2.LightAction;
import project2.MotorAction;
import project2.MusicSetting;
import project2.Project2Package;
import project2.RobotModel;
import project2.Sensor;
import project2.Sound;
import project2.SoundAction;
import project2.Tap;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Project2Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Project2Package.BUTTON:
				sequence_Button(context, (Button) semanticObject); 
				return; 
			case Project2Package.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case Project2Package.LIGHT_ACTION:
				sequence_LightAction(context, (LightAction) semanticObject); 
				return; 
			case Project2Package.MOTOR_ACTION:
				sequence_MotorAction(context, (MotorAction) semanticObject); 
				return; 
			case Project2Package.MUSIC_SETTING:
				sequence_MusicSetting(context, (MusicSetting) semanticObject); 
				return; 
			case Project2Package.ROBOT_MODEL:
				sequence_RobotModel(context, (RobotModel) semanticObject); 
				return; 
			case Project2Package.SENSOR:
				sequence_Sensor(context, (Sensor) semanticObject); 
				return; 
			case Project2Package.SOUND:
				sequence_Sound(context, (Sound) semanticObject); 
				return; 
			case Project2Package.SOUND_ACTION:
				sequence_SoundAction(context, (SoundAction) semanticObject); 
				return; 
			case Project2Package.TAP:
				sequence_Tap(context, (Tap) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns Button
	 *     Button returns Button
	 *
	 * Constraint:
	 *     (conditionname=EString button=ButtonType)
	 * </pre>
	 */
	protected void sequence_Button(ISerializationContext context, Button semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Project2Package.Literals.CONDITION__CONDITIONNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Project2Package.Literals.CONDITION__CONDITIONNAME));
			if (transientValues.isValueTransient(semanticObject, Project2Package.Literals.BUTTON__BUTTON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Project2Package.Literals.BUTTON__BUTTON));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getButtonAccess().getConditionnameEStringParserRuleCall_2_0(), semanticObject.getConditionname());
		feeder.accept(grammarAccess.getButtonAccess().getButtonButtonTypeEnumRuleCall_4_0(), semanticObject.getButton());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Event returns Event
	 *
	 * Constraint:
	 *     (name=EString condition=[Condition|EString]? (actions+=[Action|EString] actions+=[Action|EString]*)?)
	 * </pre>
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Action returns LightAction
	 *     LightAction returns LightAction
	 *
	 * Constraint:
	 *     (actionname=EString pos=LightPos red=EInt? green=EInt? blue=EInt?)
	 * </pre>
	 */
	protected void sequence_LightAction(ISerializationContext context, LightAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Action returns MotorAction
	 *     MotorAction returns MotorAction
	 *
	 * Constraint:
	 *     (actionname=EString motorLeft=EInt motorRight=EInt)
	 * </pre>
	 */
	protected void sequence_MotorAction(ISerializationContext context, MotorAction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Project2Package.Literals.ACTION__ACTIONNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Project2Package.Literals.ACTION__ACTIONNAME));
			if (transientValues.isValueTransient(semanticObject, Project2Package.Literals.MOTOR_ACTION__MOTOR_LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Project2Package.Literals.MOTOR_ACTION__MOTOR_LEFT));
			if (transientValues.isValueTransient(semanticObject, Project2Package.Literals.MOTOR_ACTION__MOTOR_RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Project2Package.Literals.MOTOR_ACTION__MOTOR_RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMotorActionAccess().getActionnameEStringParserRuleCall_2_0(), semanticObject.getActionname());
		feeder.accept(grammarAccess.getMotorActionAccess().getMotorLeftEIntParserRuleCall_3_1_0(), semanticObject.getMotorLeft());
		feeder.accept(grammarAccess.getMotorActionAccess().getMotorRightEIntParserRuleCall_4_1_0(), semanticObject.getMotorRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MusicSetting returns MusicSetting
	 *
	 * Constraint:
	 *     (note=EInt duration=Duration pos=EInt)
	 * </pre>
	 */
	protected void sequence_MusicSetting(ISerializationContext context, MusicSetting semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Project2Package.Literals.MUSIC_SETTING__NOTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Project2Package.Literals.MUSIC_SETTING__NOTE));
			if (transientValues.isValueTransient(semanticObject, Project2Package.Literals.MUSIC_SETTING__DURATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Project2Package.Literals.MUSIC_SETTING__DURATION));
			if (transientValues.isValueTransient(semanticObject, Project2Package.Literals.MUSIC_SETTING__POS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Project2Package.Literals.MUSIC_SETTING__POS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMusicSettingAccess().getNoteEIntParserRuleCall_1_0(), semanticObject.getNote());
		feeder.accept(grammarAccess.getMusicSettingAccess().getDurationDurationEnumRuleCall_3_0(), semanticObject.getDuration());
		feeder.accept(grammarAccess.getMusicSettingAccess().getPosEIntParserRuleCall_5_0(), semanticObject.getPos());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RobotModel returns RobotModel
	 *
	 * Constraint:
	 *     (events+=Event? (actions+=Action actions+=Action*)? (conditions+=Condition conditions+=Condition*)?)+
	 * </pre>
	 */
	protected void sequence_RobotModel(ISerializationContext context, RobotModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns Sensor
	 *     Sensor returns Sensor
	 *
	 * Constraint:
	 *     (conditionname=EString sensorPos=EInt)
	 * </pre>
	 */
	protected void sequence_Sensor(ISerializationContext context, Sensor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Project2Package.Literals.CONDITION__CONDITIONNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Project2Package.Literals.CONDITION__CONDITIONNAME));
			if (transientValues.isValueTransient(semanticObject, Project2Package.Literals.SENSOR__SENSOR_POS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Project2Package.Literals.SENSOR__SENSOR_POS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSensorAccess().getConditionnameEStringParserRuleCall_2_0(), semanticObject.getConditionname());
		feeder.accept(grammarAccess.getSensorAccess().getSensorPosEIntParserRuleCall_4_0(), semanticObject.getSensorPos());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Action returns SoundAction
	 *     SoundAction returns SoundAction
	 *
	 * Constraint:
	 *     (actionname=EString (musicsettings+=MusicSetting musicsettings+=MusicSetting*)?)
	 * </pre>
	 */
	protected void sequence_SoundAction(ISerializationContext context, SoundAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns Sound
	 *     Sound returns Sound
	 *
	 * Constraint:
	 *     conditionname=EString
	 * </pre>
	 */
	protected void sequence_Sound(ISerializationContext context, Sound semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Project2Package.Literals.CONDITION__CONDITIONNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Project2Package.Literals.CONDITION__CONDITIONNAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSoundAccess().getConditionnameEStringParserRuleCall_2_0(), semanticObject.getConditionname());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns Tap
	 *     Tap returns Tap
	 *
	 * Constraint:
	 *     conditionname=EString
	 * </pre>
	 */
	protected void sequence_Tap(ISerializationContext context, Tap semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Project2Package.Literals.CONDITION__CONDITIONNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Project2Package.Literals.CONDITION__CONDITIONNAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTapAccess().getConditionnameEStringParserRuleCall_2_0(), semanticObject.getConditionname());
		feeder.finish();
	}
	
	
}
