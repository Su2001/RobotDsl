/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.mydsl1.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class RobotModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.RobotModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRobotModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cEventsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cEventsEventParserRuleCall_1_0_0 = (RuleCall)cEventsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cActionKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cActionsAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cActionsActionParserRuleCall_1_1_2_0 = (RuleCall)cActionsAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Assignment cActionsAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_1_1_3_1_0 = (RuleCall)cActionsAssignment_1_1_3_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cConditionKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cConditionsAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cConditionsConditionParserRuleCall_1_2_2_0 = (RuleCall)cConditionsAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_2_3 = (Group)cGroup_1_2.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_1_2_3_0 = (Keyword)cGroup_1_2_3.eContents().get(0);
		private final Assignment cConditionsAssignment_1_2_3_1 = (Assignment)cGroup_1_2_3.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_1_2_3_1_0 = (RuleCall)cConditionsAssignment_1_2_3_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_3_0 = (RuleCall)cExpressionsAssignment_1_3.eContents().get(0);
		
		//RobotModel returns RobotModel:
		//    {RobotModel}
		//        ((events+=Event)|
		//        ('Action:' '-' actions+=Action ('-' actions+=Action)*) |
		//        ('Condition:' '-'  conditions+=Condition ('-' conditions+=Condition)*) |
		//        (expressions+=Expression) )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{RobotModel}
		//    ((events+=Event)|
		//    ('Action:' '-' actions+=Action ('-' actions+=Action)*) |
		//    ('Condition:' '-'  conditions+=Condition ('-' conditions+=Condition)*) |
		//    (expressions+=Expression) )*
		public Group getGroup() { return cGroup; }
		
		//{RobotModel}
		public Action getRobotModelAction_0() { return cRobotModelAction_0; }
		
		//((events+=Event)|
		//('Action:' '-' actions+=Action ('-' actions+=Action)*) |
		//('Condition:' '-'  conditions+=Condition ('-' conditions+=Condition)*) |
		//(expressions+=Expression) )*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(events+=Event)
		public Assignment getEventsAssignment_1_0() { return cEventsAssignment_1_0; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_1_0_0() { return cEventsEventParserRuleCall_1_0_0; }
		
		//('Action:' '-' actions+=Action ('-' actions+=Action)*)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'Action:'
		public Keyword getActionKeyword_1_1_0() { return cActionKeyword_1_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1_1() { return cHyphenMinusKeyword_1_1_1; }
		
		//actions+=Action
		public Assignment getActionsAssignment_1_1_2() { return cActionsAssignment_1_1_2; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_1_1_2_0() { return cActionsActionParserRuleCall_1_1_2_0; }
		
		//('-' actions+=Action)*
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1_3_0() { return cHyphenMinusKeyword_1_1_3_0; }
		
		//actions+=Action
		public Assignment getActionsAssignment_1_1_3_1() { return cActionsAssignment_1_1_3_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_1_1_3_1_0() { return cActionsActionParserRuleCall_1_1_3_1_0; }
		
		//('Condition:' '-'  conditions+=Condition ('-' conditions+=Condition)*)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'Condition:'
		public Keyword getConditionKeyword_1_2_0() { return cConditionKeyword_1_2_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_2_1() { return cHyphenMinusKeyword_1_2_1; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_1_2_2() { return cConditionsAssignment_1_2_2; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_1_2_2_0() { return cConditionsConditionParserRuleCall_1_2_2_0; }
		
		//('-' conditions+=Condition)*
		public Group getGroup_1_2_3() { return cGroup_1_2_3; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_2_3_0() { return cHyphenMinusKeyword_1_2_3_0; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_1_2_3_1() { return cConditionsAssignment_1_2_3_1; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_1_2_3_1_0() { return cConditionsConditionParserRuleCall_1_2_3_1_0; }
		
		//(expressions+=Expression)
		public Assignment getExpressionsAssignment_1_3() { return cExpressionsAssignment_1_3; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_3_0() { return cExpressionsExpressionParserRuleCall_1_3_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOrParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression returns Expression:
		//    Or | If
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Or | If
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Or
		public RuleCall getOrParserRuleCall_0() { return cOrParserRuleCall_0; }
		
		//If
		public RuleCall getIfParserRuleCall_1() { return cIfParserRuleCall_1; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperationVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cOperationAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or returns Expression:
		//    And ({Expression.left=current} operation="||" right=And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Expression.left=current} operation="||" right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Expression.left=current} operation="||" right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }
		
		//operation="||"
		public Assignment getOperationAssignment_1_1() { return cOperationAssignment_1_1; }
		
		//"||"
		public Keyword getOperationVerticalLineVerticalLineKeyword_1_1_0() { return cOperationVerticalLineVerticalLineKeyword_1_1_0; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperationAmpersandAmpersandKeyword_1_1_0 = (Keyword)cOperationAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And returns Expression:
		//    Equality ({Expression.left=current} operation="&&" right=Equality)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Equality ({Expression.left=current} operation="&&" right=Equality)*
		public Group getGroup() { return cGroup; }
		
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//({Expression.left=current} operation="&&" right=Equality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }
		
		//operation="&&"
		public Assignment getOperationAssignment_1_1() { return cOperationAssignment_1_1; }
		
		//"&&"
		public Keyword getOperationAmpersandAmpersandKeyword_1_1_0() { return cOperationAmpersandAmpersandKeyword_1_1_0; }
		
		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperationAlternatives_1_1_0 = (Alternatives)cOperationAssignment_1_1.eContents().get(0);
		private final Keyword cOperationEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOperationAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperationExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOperationAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equality returns Expression:
		//    Comparison (
		//        {Expression.left=current} operation=("=="|"!=")
		//        right=Comparison)* ;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison (
		//    {Expression.left=current} operation=("=="|"!=")
		//    right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//(
		//       {Expression.left=current} operation=("=="|"!=")
		//       right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }
		
		//operation=("=="|"!=")
		public Assignment getOperationAssignment_1_1() { return cOperationAssignment_1_1; }
		
		//("=="|"!=")
		public Alternatives getOperationAlternatives_1_1_0() { return cOperationAlternatives_1_1_0; }
		
		//"=="
		public Keyword getOperationEqualsSignEqualsSignKeyword_1_1_0_0() { return cOperationEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//"!="
		public Keyword getOperationExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOperationExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperationAlternatives_1_1_0 = (Alternatives)cOperationAssignment_1_1.eContents().get(0);
		private final Keyword cOperationGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOperationAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperationLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOperationAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperationGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOperationAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperationLessThanSignKeyword_1_1_0_3 = (Keyword)cOperationAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison returns Expression:
		//    PlusOrMinus (
		//        {Expression.left=current} operation=(">="|"<="|">"|"<")
		//        right=PlusOrMinus)* ;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinus (
		//    {Expression.left=current} operation=(">="|"<="|">"|"<")
		//    right=PlusOrMinus)*
		public Group getGroup() { return cGroup; }
		
		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall_0() { return cPlusOrMinusParserRuleCall_0; }
		
		//(
		//       {Expression.left=current} operation=(">="|"<="|">"|"<")
		//       right=PlusOrMinus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }
		
		//operation=(">="|"<="|">"|"<")
		public Assignment getOperationAssignment_1_1() { return cOperationAssignment_1_1; }
		
		//(">="|"<="|">"|"<")
		public Alternatives getOperationAlternatives_1_1_0() { return cOperationAlternatives_1_1_0; }
		
		//">="
		public Keyword getOperationGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOperationGreaterThanSignEqualsSignKeyword_1_1_0_0; }
		
		//"<="
		public Keyword getOperationLessThanSignEqualsSignKeyword_1_1_0_1() { return cOperationLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//">"
		public Keyword getOperationGreaterThanSignKeyword_1_1_0_2() { return cOperationGreaterThanSignKeyword_1_1_0_2; }
		
		//"<"
		public Keyword getOperationLessThanSignKeyword_1_1_0_3() { return cOperationLessThanSignKeyword_1_1_0_3; }
		
		//right=PlusOrMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusOrMinus
		public RuleCall getRightPlusOrMinusParserRuleCall_1_2_0() { return cRightPlusOrMinusParserRuleCall_1_2_0; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOperationIfKeyword_1_0 = (Keyword)cOperationAssignment_1.eContents().get(0);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftExpressionParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightThenParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		
		//If returns Expression:
		//    {Expression}
		//    operation='if' left=Expression right = Then
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Expression}
		//operation='if' left=Expression right = Then
		public Group getGroup() { return cGroup; }
		
		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }
		
		//operation='if'
		public Assignment getOperationAssignment_1() { return cOperationAssignment_1; }
		
		//'if'
		public Keyword getOperationIfKeyword_1_0() { return cOperationIfKeyword_1_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_2_0() { return cLeftExpressionParserRuleCall_2_0; }
		
		//right = Then
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Then
		public RuleCall getRightThenParserRuleCall_3_0() { return cRightThenParserRuleCall_3_0; }
	}
	public class ThenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Then");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOperationThenKeyword_1_0 = (Keyword)cOperationAssignment_1.eContents().get(0);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftExpressionParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightElseParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		
		//Then returns Expression:
		//    {Expression}
		//    operation= 'then' left=Expression right = Else
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Expression}
		//operation= 'then' left=Expression right = Else
		public Group getGroup() { return cGroup; }
		
		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }
		
		//operation= 'then'
		public Assignment getOperationAssignment_1() { return cOperationAssignment_1; }
		
		//'then'
		public Keyword getOperationThenKeyword_1_0() { return cOperationThenKeyword_1_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_2_0() { return cLeftExpressionParserRuleCall_2_0; }
		
		//right = Else
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Else
		public RuleCall getRightElseParserRuleCall_3_0() { return cRightElseParserRuleCall_3_0; }
	}
	public class ElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Else");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOperationElseKeyword_1_0 = (Keyword)cOperationAssignment_1.eContents().get(0);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftExpressionParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		
		//Else returns Expression:
		//    {Expression}
		//    operation='else' left=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Expression}
		//operation='else' left=Expression
		public Group getGroup() { return cGroup; }
		
		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }
		
		//operation='else'
		public Assignment getOperationAssignment_1() { return cOperationAssignment_1; }
		
		//'else'
		public Keyword getOperationElseKeyword_1_0() { return cOperationElseKeyword_1_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_2_0() { return cLeftExpressionParserRuleCall_2_0; }
	}
	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOperationAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOperationAlternatives_1_0_1_0 = (Alternatives)cOperationAssignment_1_0_1.eContents().get(0);
		private final Keyword cOperationPlusSignKeyword_1_0_1_0_0 = (Keyword)cOperationAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOperationHyphenMinusKeyword_1_0_1_0_1 = (Keyword)cOperationAlternatives_1_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultOrDivParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left associative
		//PlusOrMinus returns Expression:
		//    MultOrDiv (
		//        ({Expression.left=current} operation=('+'| '-'))
		//        right=MultOrDiv)* ;
		@Override public ParserRule getRule() { return rule; }
		
		//MultOrDiv (
		//    ({Expression.left=current} operation=('+'| '-'))
		//    right=MultOrDiv)*
		public Group getGroup() { return cGroup; }
		
		//MultOrDiv
		public RuleCall getMultOrDivParserRuleCall_0() { return cMultOrDivParserRuleCall_0; }
		
		//(
		//       ({Expression.left=current} operation=('+'| '-'))
		//       right=MultOrDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Expression.left=current} operation=('+'| '-'))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0_0() { return cExpressionLeftAction_1_0_0; }
		
		//operation=('+'| '-')
		public Assignment getOperationAssignment_1_0_1() { return cOperationAssignment_1_0_1; }
		
		//('+'| '-')
		public Alternatives getOperationAlternatives_1_0_1_0() { return cOperationAlternatives_1_0_1_0; }
		
		//'+'
		public Keyword getOperationPlusSignKeyword_1_0_1_0_0() { return cOperationPlusSignKeyword_1_0_1_0_0; }
		
		//'-'
		public Keyword getOperationHyphenMinusKeyword_1_0_1_0_1() { return cOperationHyphenMinusKeyword_1_0_1_0_1; }
		
		//right=MultOrDiv
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MultOrDiv
		public RuleCall getRightMultOrDivParserRuleCall_1_1_0() { return cRightMultOrDivParserRuleCall_1_1_0; }
	}
	public class MultOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.MultOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperationAlternatives_1_1_0 = (Alternatives)cOperationAssignment_1_1.eContents().get(0);
		private final Keyword cOperationAsteriskKeyword_1_1_0_0 = (Keyword)cOperationAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperationSolidusKeyword_1_1_0_1 = (Keyword)cOperationAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultOrDiv returns Expression:
		//    Primary
		//        ({Expression.left=current} operation=('*'|'/')
		//        right=Primary)* ;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary
		//    ({Expression.left=current} operation=('*'|'/')
		//    right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({Expression.left=current} operation=('*'|'/')
		//right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }
		
		//operation=('*'|'/')
		public Assignment getOperationAssignment_1_1() { return cOperationAssignment_1_1; }
		
		//('*'|'/')
		public Alternatives getOperationAlternatives_1_1_0() { return cOperationAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOperationAsteriskKeyword_1_1_0_0() { return cOperationAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOperationSolidusKeyword_1_1_0_1() { return cOperationSolidusKeyword_1_1_0_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperationExclamationMarkKeyword_1_1_0 = (Keyword)cOperationAssignment_1_1.eContents().get(0);
		private final Assignment cLeftAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLeftPrimaryParserRuleCall_1_2_0 = (RuleCall)cLeftAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Primary returns Expression:
		//    '(' Expression ')' |
		//    {Expression} operation="!" left=Primary |
		//    Atomic;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' |
		//{Expression} operation="!" left=Primary |
		//Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{Expression} operation="!" left=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{Expression}
		public Action getExpressionAction_1_0() { return cExpressionAction_1_0; }
		
		//operation="!"
		public Assignment getOperationAssignment_1_1() { return cOperationAssignment_1_1; }
		
		//"!"
		public Keyword getOperationExclamationMarkKeyword_1_1_0() { return cOperationExclamationMarkKeyword_1_1_0; }
		
		//left=Primary
		public Assignment getLeftAssignment_1_2() { return cLeftAssignment_1_2; }
		
		//Primary
		public RuleCall getLeftPrimaryParserRuleCall_1_2_0() { return cLeftPrimaryParserRuleCall_1_2_0; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Atomic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueEIntParserRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Assignment cBoolAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Alternatives cBoolAlternatives_1_1_0 = (Alternatives)cBoolAssignment_1_1.eContents().get(0);
		private final Keyword cBoolTRUEKeyword_1_1_0_0 = (Keyword)cBoolAlternatives_1_1_0.eContents().get(0);
		private final Keyword cBoolFALSEKeyword_1_1_0_1 = (Keyword)cBoolAlternatives_1_1_0.eContents().get(1);
		
		//Atomic returns Expression:
		//    {Expression} (value=EInt | bool= ('TRUE' | 'FALSE'))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Expression} (value=EInt | bool= ('TRUE' | 'FALSE'))
		public Group getGroup() { return cGroup; }
		
		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }
		
		//(value=EInt | bool= ('TRUE' | 'FALSE'))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//value=EInt
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_1_0_0() { return cValueEIntParserRuleCall_1_0_0; }
		
		//bool= ('TRUE' | 'FALSE')
		public Assignment getBoolAssignment_1_1() { return cBoolAssignment_1_1; }
		
		//('TRUE' | 'FALSE')
		public Alternatives getBoolAlternatives_1_1_0() { return cBoolAlternatives_1_1_0; }
		
		//'TRUE'
		public Keyword getBoolTRUEKeyword_1_1_0_0() { return cBoolTRUEKeyword_1_1_0_0; }
		
		//'FALSE'
		public Keyword getBoolFALSEKeyword_1_1_0_1() { return cBoolFALSEKeyword_1_1_0_1; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cConditionsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConditionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cConditionsConditionCrossReference_3_1_0 = (CrossReference)cConditionsAssignment_3_1.eContents().get(0);
		private final RuleCall cConditionsConditionEStringParserRuleCall_3_1_0_1 = (RuleCall)cConditionsConditionCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cAndKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cConditionsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cConditionsConditionCrossReference_3_2_1_0 = (CrossReference)cConditionsAssignment_3_2_1.eContents().get(0);
		private final RuleCall cConditionsConditionEStringParserRuleCall_3_2_1_0_1 = (RuleCall)cConditionsConditionCrossReference_3_2_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cActionsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cActionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cActionsActionCrossReference_4_1_0 = (CrossReference)cActionsAssignment_4_1.eContents().get(0);
		private final RuleCall cActionsActionEStringParserRuleCall_4_1_0_1 = (RuleCall)cActionsActionCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cActionsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cActionsActionCrossReference_4_2_1_0 = (CrossReference)cActionsAssignment_4_2_1.eContents().get(0);
		private final RuleCall cActionsActionEStringParserRuleCall_4_2_1_0_1 = (RuleCall)cActionsActionCrossReference_4_2_1_0.eContents().get(1);
		
		//Event returns Event:
		//    {Event}
		//    'Event'
		//    name=EString
		//        ('conditions:' conditions+=[Condition|EString] ('and' conditions+=[Condition|EString])* )?
		//        ('actions:'  actions+=[Action|EString] ( "," actions+=[Action|EString])*  )?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Event}
		//'Event'
		//name=EString
		//    ('conditions:' conditions+=[Condition|EString] ('and' conditions+=[Condition|EString])* )?
		//    ('actions:'  actions+=[Action|EString] ( "," actions+=[Action|EString])*  )?
		public Group getGroup() { return cGroup; }
		
		//{Event}
		public Action getEventAction_0() { return cEventAction_0; }
		
		//'Event'
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//('conditions:' conditions+=[Condition|EString] ('and' conditions+=[Condition|EString])* )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'conditions:'
		public Keyword getConditionsKeyword_3_0() { return cConditionsKeyword_3_0; }
		
		//conditions+=[Condition|EString]
		public Assignment getConditionsAssignment_3_1() { return cConditionsAssignment_3_1; }
		
		//[Condition|EString]
		public CrossReference getConditionsConditionCrossReference_3_1_0() { return cConditionsConditionCrossReference_3_1_0; }
		
		//EString
		public RuleCall getConditionsConditionEStringParserRuleCall_3_1_0_1() { return cConditionsConditionEStringParserRuleCall_3_1_0_1; }
		
		//('and' conditions+=[Condition|EString])*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'and'
		public Keyword getAndKeyword_3_2_0() { return cAndKeyword_3_2_0; }
		
		//conditions+=[Condition|EString]
		public Assignment getConditionsAssignment_3_2_1() { return cConditionsAssignment_3_2_1; }
		
		//[Condition|EString]
		public CrossReference getConditionsConditionCrossReference_3_2_1_0() { return cConditionsConditionCrossReference_3_2_1_0; }
		
		//EString
		public RuleCall getConditionsConditionEStringParserRuleCall_3_2_1_0_1() { return cConditionsConditionEStringParserRuleCall_3_2_1_0_1; }
		
		//('actions:'  actions+=[Action|EString] ( "," actions+=[Action|EString])*  )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'actions:'
		public Keyword getActionsKeyword_4_0() { return cActionsKeyword_4_0; }
		
		//actions+=[Action|EString]
		public Assignment getActionsAssignment_4_1() { return cActionsAssignment_4_1; }
		
		//[Action|EString]
		public CrossReference getActionsActionCrossReference_4_1_0() { return cActionsActionCrossReference_4_1_0; }
		
		//EString
		public RuleCall getActionsActionEStringParserRuleCall_4_1_0_1() { return cActionsActionEStringParserRuleCall_4_1_0_1; }
		
		//( "," actions+=[Action|EString])*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//actions+=[Action|EString]
		public Assignment getActionsAssignment_4_2_1() { return cActionsAssignment_4_2_1; }
		
		//[Action|EString]
		public CrossReference getActionsActionCrossReference_4_2_1_0() { return cActionsActionCrossReference_4_2_1_0; }
		
		//EString
		public RuleCall getActionsActionEStringParserRuleCall_4_2_1_0_1() { return cActionsActionEStringParserRuleCall_4_2_1_0_1; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cButtonParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSensorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSoundParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTapParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Condition returns Condition:
		//     Button | Sensor | Sound | Tap;
		@Override public ParserRule getRule() { return rule; }
		
		//Button | Sensor | Sound | Tap
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Button
		public RuleCall getButtonParserRuleCall_0() { return cButtonParserRuleCall_0; }
		
		//Sensor
		public RuleCall getSensorParserRuleCall_1() { return cSensorParserRuleCall_1; }
		
		//Sound
		public RuleCall getSoundParserRuleCall_2() { return cSoundParserRuleCall_2; }
		
		//Tap
		public RuleCall getTapParserRuleCall_3() { return cTapParserRuleCall_3; }
	}
	public class SoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Sound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSoundAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSoundKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionnameEStringParserRuleCall_2_0 = (RuleCall)cConditionnameAssignment_2.eContents().get(0);
		
		//Sound returns Sound:
		//    {Sound}
		//    'Sound'
		//    conditionname=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Sound}
		//'Sound'
		//conditionname=EString
		public Group getGroup() { return cGroup; }
		
		//{Sound}
		public Action getSoundAction_0() { return cSoundAction_0; }
		
		//'Sound'
		public Keyword getSoundKeyword_1() { return cSoundKeyword_1; }
		
		//conditionname=EString
		public Assignment getConditionnameAssignment_2() { return cConditionnameAssignment_2; }
		
		//EString
		public RuleCall getConditionnameEStringParserRuleCall_2_0() { return cConditionnameEStringParserRuleCall_2_0; }
	}
	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Button");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cButtonAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cButtonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionnameEStringParserRuleCall_2_0 = (RuleCall)cConditionnameAssignment_2.eContents().get(0);
		private final Keyword cButtonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cButtonAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cButtonButtonTypeEnumRuleCall_4_0 = (RuleCall)cButtonAssignment_4.eContents().get(0);
		
		//Button returns Button:
		//    {Button}
		//    'Button'
		//    conditionname=EString
		//        'button' button=ButtonType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Button}
		//'Button'
		//conditionname=EString
		//    'button' button=ButtonType
		public Group getGroup() { return cGroup; }
		
		//{Button}
		public Action getButtonAction_0() { return cButtonAction_0; }
		
		//'Button'
		public Keyword getButtonKeyword_1() { return cButtonKeyword_1; }
		
		//conditionname=EString
		public Assignment getConditionnameAssignment_2() { return cConditionnameAssignment_2; }
		
		//EString
		public RuleCall getConditionnameEStringParserRuleCall_2_0() { return cConditionnameEStringParserRuleCall_2_0; }
		
		//'button'
		public Keyword getButtonKeyword_3() { return cButtonKeyword_3; }
		
		//button=ButtonType
		public Assignment getButtonAssignment_4() { return cButtonAssignment_4; }
		
		//ButtonType
		public RuleCall getButtonButtonTypeEnumRuleCall_4_0() { return cButtonButtonTypeEnumRuleCall_4_0; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSensorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSensorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionnameEStringParserRuleCall_2_0 = (RuleCall)cConditionnameAssignment_2.eContents().get(0);
		private final Keyword cSensorPosKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSensorPosAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSensorPosEIntParserRuleCall_4_0 = (RuleCall)cSensorPosAssignment_4.eContents().get(0);
		private final Keyword cDistanceKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDistanceAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDistanceDistanceEnumRuleCall_6_0 = (RuleCall)cDistanceAssignment_6.eContents().get(0);
		
		//Sensor returns Sensor:
		//    {Sensor}
		//    'Sensor'
		//    conditionname=EString
		//    'sensorPos' sensorPos=EInt
		//    'distance' distance=Distance
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Sensor}
		//'Sensor'
		//conditionname=EString
		//'sensorPos' sensorPos=EInt
		//'distance' distance=Distance
		public Group getGroup() { return cGroup; }
		
		//{Sensor}
		public Action getSensorAction_0() { return cSensorAction_0; }
		
		//'Sensor'
		public Keyword getSensorKeyword_1() { return cSensorKeyword_1; }
		
		//conditionname=EString
		public Assignment getConditionnameAssignment_2() { return cConditionnameAssignment_2; }
		
		//EString
		public RuleCall getConditionnameEStringParserRuleCall_2_0() { return cConditionnameEStringParserRuleCall_2_0; }
		
		//'sensorPos'
		public Keyword getSensorPosKeyword_3() { return cSensorPosKeyword_3; }
		
		//sensorPos=EInt
		public Assignment getSensorPosAssignment_4() { return cSensorPosAssignment_4; }
		
		//EInt
		public RuleCall getSensorPosEIntParserRuleCall_4_0() { return cSensorPosEIntParserRuleCall_4_0; }
		
		//'distance'
		public Keyword getDistanceKeyword_5() { return cDistanceKeyword_5; }
		
		//distance=Distance
		public Assignment getDistanceAssignment_6() { return cDistanceAssignment_6; }
		
		//Distance
		public RuleCall getDistanceDistanceEnumRuleCall_6_0() { return cDistanceDistanceEnumRuleCall_6_0; }
	}
	public class TapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Tap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTapAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTapKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionnameEStringParserRuleCall_2_0 = (RuleCall)cConditionnameAssignment_2.eContents().get(0);
		
		//Tap returns Tap:
		//    {Tap}
		//    'Tap'
		//    conditionname=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Tap}
		//'Tap'
		//conditionname=EString
		public Group getGroup() { return cGroup; }
		
		//{Tap}
		public Action getTapAction_0() { return cTapAction_0; }
		
		//'Tap'
		public Keyword getTapKeyword_1() { return cTapKeyword_1; }
		
		//conditionname=EString
		public Assignment getConditionnameAssignment_2() { return cConditionnameAssignment_2; }
		
		//EString
		public RuleCall getConditionnameEStringParserRuleCall_2_0() { return cConditionnameEStringParserRuleCall_2_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMotorActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSoundActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLightActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Action returns Action:
		//     MotorAction | SoundAction | LightAction;
		@Override public ParserRule getRule() { return rule; }
		
		//MotorAction | SoundAction | LightAction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MotorAction
		public RuleCall getMotorActionParserRuleCall_0() { return cMotorActionParserRuleCall_0; }
		
		//SoundAction
		public RuleCall getSoundActionParserRuleCall_1() { return cSoundActionParserRuleCall_1; }
		
		//LightAction
		public RuleCall getLightActionParserRuleCall_2() { return cLightActionParserRuleCall_2; }
	}
	public class MotorActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.MotorAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMotorActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMotorActionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActionnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionnameEStringParserRuleCall_2_0 = (RuleCall)cActionnameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMotorLeftKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMotorLeftAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMotorLeftEIntParserRuleCall_3_1_0 = (RuleCall)cMotorLeftAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cMotorRightKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMotorRightAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMotorRightEIntParserRuleCall_4_1_0 = (RuleCall)cMotorRightAssignment_4_1.eContents().get(0);
		
		//MotorAction returns MotorAction:
		//    {MotorAction}
		//    'MotorAction'
		//    actionname=EString
		//        ('motorLeft' (motorLeft=EInt))?
		//        ('motorRight' (motorRight=EInt))?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{MotorAction}
		//'MotorAction'
		//actionname=EString
		//    ('motorLeft' (motorLeft=EInt))?
		//    ('motorRight' (motorRight=EInt))?
		public Group getGroup() { return cGroup; }
		
		//{MotorAction}
		public Action getMotorActionAction_0() { return cMotorActionAction_0; }
		
		//'MotorAction'
		public Keyword getMotorActionKeyword_1() { return cMotorActionKeyword_1; }
		
		//actionname=EString
		public Assignment getActionnameAssignment_2() { return cActionnameAssignment_2; }
		
		//EString
		public RuleCall getActionnameEStringParserRuleCall_2_0() { return cActionnameEStringParserRuleCall_2_0; }
		
		//('motorLeft' (motorLeft=EInt))?
		public Group getGroup_3() { return cGroup_3; }
		
		//'motorLeft'
		public Keyword getMotorLeftKeyword_3_0() { return cMotorLeftKeyword_3_0; }
		
		//(motorLeft=EInt)
		public Assignment getMotorLeftAssignment_3_1() { return cMotorLeftAssignment_3_1; }
		
		//EInt
		public RuleCall getMotorLeftEIntParserRuleCall_3_1_0() { return cMotorLeftEIntParserRuleCall_3_1_0; }
		
		//('motorRight' (motorRight=EInt))?
		public Group getGroup_4() { return cGroup_4; }
		
		//'motorRight'
		public Keyword getMotorRightKeyword_4_0() { return cMotorRightKeyword_4_0; }
		
		//(motorRight=EInt)
		public Assignment getMotorRightAssignment_4_1() { return cMotorRightAssignment_4_1; }
		
		//EInt
		public RuleCall getMotorRightEIntParserRuleCall_4_1_0() { return cMotorRightEIntParserRuleCall_4_1_0; }
	}
	public class SoundActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.SoundAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSoundActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSoundActionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActionnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionnameEStringParserRuleCall_2_0 = (RuleCall)cActionnameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSetKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMusicsettingsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMusicsettingsMusicSettingParserRuleCall_3_1_0 = (RuleCall)cMusicsettingsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cMusicsettingsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cMusicsettingsMusicSettingParserRuleCall_3_2_1_0 = (RuleCall)cMusicsettingsAssignment_3_2_1.eContents().get(0);
		
		//SoundAction returns SoundAction:
		//    {SoundAction}
		//    'SoundAction'
		//    actionname=EString
		//    ('set:' musicsettings+=MusicSetting (',' musicsettings+=MusicSetting)*)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SoundAction}
		//'SoundAction'
		//actionname=EString
		//('set:' musicsettings+=MusicSetting (',' musicsettings+=MusicSetting)*)?
		public Group getGroup() { return cGroup; }
		
		//{SoundAction}
		public Action getSoundActionAction_0() { return cSoundActionAction_0; }
		
		//'SoundAction'
		public Keyword getSoundActionKeyword_1() { return cSoundActionKeyword_1; }
		
		//actionname=EString
		public Assignment getActionnameAssignment_2() { return cActionnameAssignment_2; }
		
		//EString
		public RuleCall getActionnameEStringParserRuleCall_2_0() { return cActionnameEStringParserRuleCall_2_0; }
		
		//('set:' musicsettings+=MusicSetting (',' musicsettings+=MusicSetting)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'set:'
		public Keyword getSetKeyword_3_0() { return cSetKeyword_3_0; }
		
		//musicsettings+=MusicSetting
		public Assignment getMusicsettingsAssignment_3_1() { return cMusicsettingsAssignment_3_1; }
		
		//MusicSetting
		public RuleCall getMusicsettingsMusicSettingParserRuleCall_3_1_0() { return cMusicsettingsMusicSettingParserRuleCall_3_1_0; }
		
		//(',' musicsettings+=MusicSetting)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//musicsettings+=MusicSetting
		public Assignment getMusicsettingsAssignment_3_2_1() { return cMusicsettingsAssignment_3_2_1; }
		
		//MusicSetting
		public RuleCall getMusicsettingsMusicSettingParserRuleCall_3_2_1_0() { return cMusicsettingsMusicSettingParserRuleCall_3_2_1_0; }
	}
	public class LightActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.LightAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLightActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLightActionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActionnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionnameEStringParserRuleCall_2_0 = (RuleCall)cActionnameAssignment_2.eContents().get(0);
		private final Keyword cPosKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPosAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPosLightPosEnumRuleCall_4_0 = (RuleCall)cPosAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRedKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRedAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRedEIntParserRuleCall_5_1_0 = (RuleCall)cRedAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cGreenKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cGreenAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cGreenEIntParserRuleCall_6_1_0 = (RuleCall)cGreenAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cBlueKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cBlueAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cBlueEIntParserRuleCall_7_1_0 = (RuleCall)cBlueAssignment_7_1.eContents().get(0);
		
		//LightAction returns LightAction:
		//    {LightAction}
		//    'LightAction'
		//    actionname=EString
		//    'pos:' pos=LightPos
		//    ('red:' red=EInt)?
		//    ('green:' green=EInt)?
		//    ('blue:' blue=EInt)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{LightAction}
		//'LightAction'
		//actionname=EString
		//'pos:' pos=LightPos
		//('red:' red=EInt)?
		//('green:' green=EInt)?
		//('blue:' blue=EInt)?
		public Group getGroup() { return cGroup; }
		
		//{LightAction}
		public Action getLightActionAction_0() { return cLightActionAction_0; }
		
		//'LightAction'
		public Keyword getLightActionKeyword_1() { return cLightActionKeyword_1; }
		
		//actionname=EString
		public Assignment getActionnameAssignment_2() { return cActionnameAssignment_2; }
		
		//EString
		public RuleCall getActionnameEStringParserRuleCall_2_0() { return cActionnameEStringParserRuleCall_2_0; }
		
		//'pos:'
		public Keyword getPosKeyword_3() { return cPosKeyword_3; }
		
		//pos=LightPos
		public Assignment getPosAssignment_4() { return cPosAssignment_4; }
		
		//LightPos
		public RuleCall getPosLightPosEnumRuleCall_4_0() { return cPosLightPosEnumRuleCall_4_0; }
		
		//('red:' red=EInt)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'red:'
		public Keyword getRedKeyword_5_0() { return cRedKeyword_5_0; }
		
		//red=EInt
		public Assignment getRedAssignment_5_1() { return cRedAssignment_5_1; }
		
		//EInt
		public RuleCall getRedEIntParserRuleCall_5_1_0() { return cRedEIntParserRuleCall_5_1_0; }
		
		//('green:' green=EInt)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'green:'
		public Keyword getGreenKeyword_6_0() { return cGreenKeyword_6_0; }
		
		//green=EInt
		public Assignment getGreenAssignment_6_1() { return cGreenAssignment_6_1; }
		
		//EInt
		public RuleCall getGreenEIntParserRuleCall_6_1_0() { return cGreenEIntParserRuleCall_6_1_0; }
		
		//('blue:' blue=EInt)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'blue:'
		public Keyword getBlueKeyword_7_0() { return cBlueKeyword_7_0; }
		
		//blue=EInt
		public Assignment getBlueAssignment_7_1() { return cBlueAssignment_7_1; }
		
		//EInt
		public RuleCall getBlueEIntParserRuleCall_7_1_0() { return cBlueEIntParserRuleCall_7_1_0; }
	}
	public class MusicSettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.MusicSetting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMusicSettingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNoteAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNoteEIntParserRuleCall_2_0 = (RuleCall)cNoteAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDurationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDurationDurationEnumRuleCall_4_0 = (RuleCall)cDurationAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPosAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPosEIntParserRuleCall_6_0 = (RuleCall)cPosAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//MusicSetting returns MusicSetting:
		//    {MusicSetting}
		//    '(' note=EInt ',' duration=Duration ',' pos=EInt')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{MusicSetting}
		//'(' note=EInt ',' duration=Duration ',' pos=EInt')'
		public Group getGroup() { return cGroup; }
		
		//{MusicSetting}
		public Action getMusicSettingAction_0() { return cMusicSettingAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//note=EInt
		public Assignment getNoteAssignment_2() { return cNoteAssignment_2; }
		
		//EInt
		public RuleCall getNoteEIntParserRuleCall_2_0() { return cNoteEIntParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//duration=Duration
		public Assignment getDurationAssignment_4() { return cDurationAssignment_4; }
		
		//Duration
		public RuleCall getDurationDurationEnumRuleCall_4_0() { return cDurationDurationEnumRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//pos=EInt
		public Assignment getPosAssignment_6() { return cPosAssignment_6; }
		
		//EInt
		public RuleCall getPosEIntParserRuleCall_6_0() { return cPosEIntParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	public class DurationElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Duration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONENONEKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMEDIUMEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMEDIUMMEDIUMKeyword_1_0 = (Keyword)cMEDIUMEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLONGEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLONGLONGKeyword_2_0 = (Keyword)cLONGEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Duration returns Duration:
		//    NONE = 'NONE' | MEDIUM = 'MEDIUM' | LONG = 'LONG'
		//;
		public EnumRule getRule() { return rule; }
		
		//NONE = 'NONE' | MEDIUM = 'MEDIUM' | LONG = 'LONG'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NONE = 'NONE'
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }
		
		//'NONE'
		public Keyword getNONENONEKeyword_0_0() { return cNONENONEKeyword_0_0; }
		
		//MEDIUM = 'MEDIUM'
		public EnumLiteralDeclaration getMEDIUMEnumLiteralDeclaration_1() { return cMEDIUMEnumLiteralDeclaration_1; }
		
		//'MEDIUM'
		public Keyword getMEDIUMMEDIUMKeyword_1_0() { return cMEDIUMMEDIUMKeyword_1_0; }
		
		//LONG = 'LONG'
		public EnumLiteralDeclaration getLONGEnumLiteralDeclaration_2() { return cLONGEnumLiteralDeclaration_2; }
		
		//'LONG'
		public Keyword getLONGLONGKeyword_2_0() { return cLONGLONGKeyword_2_0; }
	}
	public class LightPosElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.LightPos");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTOPEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTOPTOPKeyword_0_0 = (Keyword)cTOPEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBOTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBOTBOTKeyword_1_0 = (Keyword)cBOTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LightPos returns LightPos:
		//    TOP = 'TOP' | BOT = 'BOT'
		//;
		public EnumRule getRule() { return rule; }
		
		//TOP = 'TOP' | BOT = 'BOT'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TOP = 'TOP'
		public EnumLiteralDeclaration getTOPEnumLiteralDeclaration_0() { return cTOPEnumLiteralDeclaration_0; }
		
		//'TOP'
		public Keyword getTOPTOPKeyword_0_0() { return cTOPTOPKeyword_0_0; }
		
		//BOT = 'BOT'
		public EnumLiteralDeclaration getBOTEnumLiteralDeclaration_1() { return cBOTEnumLiteralDeclaration_1; }
		
		//'BOT'
		public Keyword getBOTBOTKeyword_1_0() { return cBOTBOTKeyword_1_0; }
	}
	public class DistanceElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Distance");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFAREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFARFARKeyword_0_0 = (Keyword)cFAREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCLOSEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCLOSECLOSEKeyword_1_0 = (Keyword)cCLOSEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Distance returns Distance:
		//    FAR = 'FAR' | CLOSE = 'CLOSE'
		//;
		public EnumRule getRule() { return rule; }
		
		//FAR = 'FAR' | CLOSE = 'CLOSE'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FAR = 'FAR'
		public EnumLiteralDeclaration getFAREnumLiteralDeclaration_0() { return cFAREnumLiteralDeclaration_0; }
		
		//'FAR'
		public Keyword getFARFARKeyword_0_0() { return cFARFARKeyword_0_0; }
		
		//CLOSE = 'CLOSE'
		public EnumLiteralDeclaration getCLOSEEnumLiteralDeclaration_1() { return cCLOSEEnumLiteralDeclaration_1; }
		
		//'CLOSE'
		public Keyword getCLOSECLOSEKeyword_1_0() { return cCLOSECLOSEKeyword_1_0; }
	}
	public class ButtonTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ButtonType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBACKWARDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBACKWARDBACKWARDKeyword_0_0 = (Keyword)cBACKWARDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLEFTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLEFTLEFTKeyword_1_0 = (Keyword)cLEFTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRIGHTRIGHTKeyword_2_0 = (Keyword)cRIGHTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCENTEREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCENTERCENTERKeyword_3_0 = (Keyword)cCENTEREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFORWARDEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFORWARDFORWARDKeyword_4_0 = (Keyword)cFORWARDEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ButtonType returns ButtonType:
		//                BACKWARD = 'BACKWARD' | LEFT = 'LEFT' | RIGHT = 'RIGHT' | CENTER = 'CENTER' | FORWARD = 'FORWARD';
		public EnumRule getRule() { return rule; }
		
		//BACKWARD = 'BACKWARD' | LEFT = 'LEFT' | RIGHT = 'RIGHT' | CENTER = 'CENTER' | FORWARD = 'FORWARD'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BACKWARD = 'BACKWARD'
		public EnumLiteralDeclaration getBACKWARDEnumLiteralDeclaration_0() { return cBACKWARDEnumLiteralDeclaration_0; }
		
		//'BACKWARD'
		public Keyword getBACKWARDBACKWARDKeyword_0_0() { return cBACKWARDBACKWARDKeyword_0_0; }
		
		//LEFT = 'LEFT'
		public EnumLiteralDeclaration getLEFTEnumLiteralDeclaration_1() { return cLEFTEnumLiteralDeclaration_1; }
		
		//'LEFT'
		public Keyword getLEFTLEFTKeyword_1_0() { return cLEFTLEFTKeyword_1_0; }
		
		//RIGHT = 'RIGHT'
		public EnumLiteralDeclaration getRIGHTEnumLiteralDeclaration_2() { return cRIGHTEnumLiteralDeclaration_2; }
		
		//'RIGHT'
		public Keyword getRIGHTRIGHTKeyword_2_0() { return cRIGHTRIGHTKeyword_2_0; }
		
		//CENTER = 'CENTER'
		public EnumLiteralDeclaration getCENTEREnumLiteralDeclaration_3() { return cCENTEREnumLiteralDeclaration_3; }
		
		//'CENTER'
		public Keyword getCENTERCENTERKeyword_3_0() { return cCENTERCENTERKeyword_3_0; }
		
		//FORWARD = 'FORWARD'
		public EnumLiteralDeclaration getFORWARDEnumLiteralDeclaration_4() { return cFORWARDEnumLiteralDeclaration_4; }
		
		//'FORWARD'
		public Keyword getFORWARDFORWARDKeyword_4_0() { return cFORWARDFORWARDKeyword_4_0; }
	}
	
	private final RobotModelElements pRobotModel;
	private final ExpressionElements pExpression;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualityElements pEquality;
	private final ComparisonElements pComparison;
	private final IfElements pIf;
	private final ThenElements pThen;
	private final ElseElements pElse;
	private final PlusOrMinusElements pPlusOrMinus;
	private final MultOrDivElements pMultOrDiv;
	private final PrimaryElements pPrimary;
	private final AtomicElements pAtomic;
	private final EventElements pEvent;
	private final ConditionElements pCondition;
	private final SoundElements pSound;
	private final ButtonElements pButton;
	private final SensorElements pSensor;
	private final TapElements pTap;
	private final ActionElements pAction;
	private final MotorActionElements pMotorAction;
	private final SoundActionElements pSoundAction;
	private final LightActionElements pLightAction;
	private final MusicSettingElements pMusicSetting;
	private final EIntElements pEInt;
	private final EStringElements pEString;
	private final DurationElements eDuration;
	private final LightPosElements eLightPos;
	private final DistanceElements eDistance;
	private final ButtonTypeElements eButtonType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRobotModel = new RobotModelElements();
		this.pExpression = new ExpressionElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEquality = new EqualityElements();
		this.pComparison = new ComparisonElements();
		this.pIf = new IfElements();
		this.pThen = new ThenElements();
		this.pElse = new ElseElements();
		this.pPlusOrMinus = new PlusOrMinusElements();
		this.pMultOrDiv = new MultOrDivElements();
		this.pPrimary = new PrimaryElements();
		this.pAtomic = new AtomicElements();
		this.pEvent = new EventElements();
		this.pCondition = new ConditionElements();
		this.pSound = new SoundElements();
		this.pButton = new ButtonElements();
		this.pSensor = new SensorElements();
		this.pTap = new TapElements();
		this.pAction = new ActionElements();
		this.pMotorAction = new MotorActionElements();
		this.pSoundAction = new SoundActionElements();
		this.pLightAction = new LightActionElements();
		this.pMusicSetting = new MusicSettingElements();
		this.pEInt = new EIntElements();
		this.pEString = new EStringElements();
		this.eDuration = new DurationElements();
		this.eLightPos = new LightPosElements();
		this.eDistance = new DistanceElements();
		this.eButtonType = new ButtonTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl1.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RobotModel returns RobotModel:
	//    {RobotModel}
	//        ((events+=Event)|
	//        ('Action:' '-' actions+=Action ('-' actions+=Action)*) |
	//        ('Condition:' '-'  conditions+=Condition ('-' conditions+=Condition)*) |
	//        (expressions+=Expression) )*
	//;
	public RobotModelElements getRobotModelAccess() {
		return pRobotModel;
	}
	
	public ParserRule getRobotModelRule() {
		return getRobotModelAccess().getRule();
	}
	
	//Expression returns Expression:
	//    Or | If
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Or returns Expression:
	//    And ({Expression.left=current} operation="||" right=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And returns Expression:
	//    Equality ({Expression.left=current} operation="&&" right=Equality)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Equality returns Expression:
	//    Comparison (
	//        {Expression.left=current} operation=("=="|"!=")
	//        right=Comparison)* ;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//Comparison returns Expression:
	//    PlusOrMinus (
	//        {Expression.left=current} operation=(">="|"<="|">"|"<")
	//        right=PlusOrMinus)* ;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//If returns Expression:
	//    {Expression}
	//    operation='if' left=Expression right = Then
	//;
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//Then returns Expression:
	//    {Expression}
	//    operation= 'then' left=Expression right = Else
	//;
	public ThenElements getThenAccess() {
		return pThen;
	}
	
	public ParserRule getThenRule() {
		return getThenAccess().getRule();
	}
	
	//Else returns Expression:
	//    {Expression}
	//    operation='else' left=Expression
	//;
	public ElseElements getElseAccess() {
		return pElse;
	}
	
	public ParserRule getElseRule() {
		return getElseAccess().getRule();
	}
	
	//// left associative
	//PlusOrMinus returns Expression:
	//    MultOrDiv (
	//        ({Expression.left=current} operation=('+'| '-'))
	//        right=MultOrDiv)* ;
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return pPlusOrMinus;
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	//MultOrDiv returns Expression:
	//    Primary
	//        ({Expression.left=current} operation=('*'|'/')
	//        right=Primary)* ;
	public MultOrDivElements getMultOrDivAccess() {
		return pMultOrDiv;
	}
	
	public ParserRule getMultOrDivRule() {
		return getMultOrDivAccess().getRule();
	}
	
	//Primary returns Expression:
	//    '(' Expression ')' |
	//    {Expression} operation="!" left=Primary |
	//    Atomic;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Atomic returns Expression:
	//    {Expression} (value=EInt | bool= ('TRUE' | 'FALSE'))
	//;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//Event returns Event:
	//    {Event}
	//    'Event'
	//    name=EString
	//        ('conditions:' conditions+=[Condition|EString] ('and' conditions+=[Condition|EString])* )?
	//        ('actions:'  actions+=[Action|EString] ( "," actions+=[Action|EString])*  )?
	//    ;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//Condition returns Condition:
	//     Button | Sensor | Sound | Tap;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Sound returns Sound:
	//    {Sound}
	//    'Sound'
	//    conditionname=EString
	//;
	public SoundElements getSoundAccess() {
		return pSound;
	}
	
	public ParserRule getSoundRule() {
		return getSoundAccess().getRule();
	}
	
	//Button returns Button:
	//    {Button}
	//    'Button'
	//    conditionname=EString
	//        'button' button=ButtonType
	//;
	public ButtonElements getButtonAccess() {
		return pButton;
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}
	
	//Sensor returns Sensor:
	//    {Sensor}
	//    'Sensor'
	//    conditionname=EString
	//    'sensorPos' sensorPos=EInt
	//    'distance' distance=Distance
	//;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//Tap returns Tap:
	//    {Tap}
	//    'Tap'
	//    conditionname=EString
	//;
	public TapElements getTapAccess() {
		return pTap;
	}
	
	public ParserRule getTapRule() {
		return getTapAccess().getRule();
	}
	
	//Action returns Action:
	//     MotorAction | SoundAction | LightAction;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//MotorAction returns MotorAction:
	//    {MotorAction}
	//    'MotorAction'
	//    actionname=EString
	//        ('motorLeft' (motorLeft=EInt))?
	//        ('motorRight' (motorRight=EInt))?
	//;
	public MotorActionElements getMotorActionAccess() {
		return pMotorAction;
	}
	
	public ParserRule getMotorActionRule() {
		return getMotorActionAccess().getRule();
	}
	
	//SoundAction returns SoundAction:
	//    {SoundAction}
	//    'SoundAction'
	//    actionname=EString
	//    ('set:' musicsettings+=MusicSetting (',' musicsettings+=MusicSetting)*)?
	//;
	public SoundActionElements getSoundActionAccess() {
		return pSoundAction;
	}
	
	public ParserRule getSoundActionRule() {
		return getSoundActionAccess().getRule();
	}
	
	//LightAction returns LightAction:
	//    {LightAction}
	//    'LightAction'
	//    actionname=EString
	//    'pos:' pos=LightPos
	//    ('red:' red=EInt)?
	//    ('green:' green=EInt)?
	//    ('blue:' blue=EInt)?
	//;
	public LightActionElements getLightActionAccess() {
		return pLightAction;
	}
	
	public ParserRule getLightActionRule() {
		return getLightActionAccess().getRule();
	}
	
	//MusicSetting returns MusicSetting:
	//    {MusicSetting}
	//    '(' note=EInt ',' duration=Duration ',' pos=EInt')'
	//;
	public MusicSettingElements getMusicSettingAccess() {
		return pMusicSetting;
	}
	
	public ParserRule getMusicSettingRule() {
		return getMusicSettingAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//enum Duration returns Duration:
	//    NONE = 'NONE' | MEDIUM = 'MEDIUM' | LONG = 'LONG'
	//;
	public DurationElements getDurationAccess() {
		return eDuration;
	}
	
	public EnumRule getDurationRule() {
		return getDurationAccess().getRule();
	}
	
	//enum LightPos returns LightPos:
	//    TOP = 'TOP' | BOT = 'BOT'
	//;
	public LightPosElements getLightPosAccess() {
		return eLightPos;
	}
	
	public EnumRule getLightPosRule() {
		return getLightPosAccess().getRule();
	}
	
	//enum Distance returns Distance:
	//    FAR = 'FAR' | CLOSE = 'CLOSE'
	//;
	public DistanceElements getDistanceAccess() {
		return eDistance;
	}
	
	public EnumRule getDistanceRule() {
		return getDistanceAccess().getRule();
	}
	
	//enum ButtonType returns ButtonType:
	//                BACKWARD = 'BACKWARD' | LEFT = 'LEFT' | RIGHT = 'RIGHT' | CENTER = 'CENTER' | FORWARD = 'FORWARD';
	public ButtonTypeElements getButtonTypeAccess() {
		return eButtonType;
	}
	
	public EnumRule getButtonTypeRule() {
		return getButtonTypeAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
