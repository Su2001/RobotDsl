/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.mydsl1.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class RobotModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.RobotModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRobotModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cEventsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cEventsEventParserRuleCall_1_0_0 = (RuleCall)cEventsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cActionKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cActionsAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cActionsActionParserRuleCall_1_1_2_0 = (RuleCall)cActionsAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Assignment cActionsAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_1_1_3_1_0 = (RuleCall)cActionsAssignment_1_1_3_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cConditionKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cConditionsAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cConditionsConditionParserRuleCall_1_2_2_0 = (RuleCall)cConditionsAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_2_3 = (Group)cGroup_1_2.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_1_2_3_0 = (Keyword)cGroup_1_2_3.eContents().get(0);
		private final Assignment cConditionsAssignment_1_2_3_1 = (Assignment)cGroup_1_2_3.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_1_2_3_1_0 = (RuleCall)cConditionsAssignment_1_2_3_1.eContents().get(0);
		
		//RobotModel returns RobotModel:
		//    {RobotModel}
		//        ((events+=Event  )|
		//        ('Action:' '-' actions+=Action ('-' actions+=Action)*) |
		//        ('Condition:' '-'  conditions+=Condition ('-' conditions+=Condition)*) )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{RobotModel}
		//    ((events+=Event  )|
		//    ('Action:' '-' actions+=Action ('-' actions+=Action)*) |
		//    ('Condition:' '-'  conditions+=Condition ('-' conditions+=Condition)*) )*
		public Group getGroup() { return cGroup; }
		
		//{RobotModel}
		public Action getRobotModelAction_0() { return cRobotModelAction_0; }
		
		//((events+=Event  )|
		//('Action:' '-' actions+=Action ('-' actions+=Action)*) |
		//('Condition:' '-'  conditions+=Condition ('-' conditions+=Condition)*) )*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(events+=Event  )
		public Assignment getEventsAssignment_1_0() { return cEventsAssignment_1_0; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_1_0_0() { return cEventsEventParserRuleCall_1_0_0; }
		
		//('Action:' '-' actions+=Action ('-' actions+=Action)*)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'Action:'
		public Keyword getActionKeyword_1_1_0() { return cActionKeyword_1_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1_1() { return cHyphenMinusKeyword_1_1_1; }
		
		//actions+=Action
		public Assignment getActionsAssignment_1_1_2() { return cActionsAssignment_1_1_2; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_1_1_2_0() { return cActionsActionParserRuleCall_1_1_2_0; }
		
		//('-' actions+=Action)*
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1_3_0() { return cHyphenMinusKeyword_1_1_3_0; }
		
		//actions+=Action
		public Assignment getActionsAssignment_1_1_3_1() { return cActionsAssignment_1_1_3_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_1_1_3_1_0() { return cActionsActionParserRuleCall_1_1_3_1_0; }
		
		//('Condition:' '-'  conditions+=Condition ('-' conditions+=Condition)*)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'Condition:'
		public Keyword getConditionKeyword_1_2_0() { return cConditionKeyword_1_2_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_2_1() { return cHyphenMinusKeyword_1_2_1; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_1_2_2() { return cConditionsAssignment_1_2_2; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_1_2_2_0() { return cConditionsConditionParserRuleCall_1_2_2_0; }
		
		//('-' conditions+=Condition)*
		public Group getGroup_1_2_3() { return cGroup_1_2_3; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_2_3_0() { return cHyphenMinusKeyword_1_2_3_0; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_1_2_3_1() { return cConditionsAssignment_1_2_3_1; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_1_2_3_1_0() { return cConditionsConditionParserRuleCall_1_2_3_1_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cConditionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConditionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cConditionConditionCrossReference_3_1_0 = (CrossReference)cConditionAssignment_3_1.eContents().get(0);
		private final RuleCall cConditionConditionEStringParserRuleCall_3_1_0_1 = (RuleCall)cConditionConditionCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cActionsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cActionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cActionsActionCrossReference_4_1_0 = (CrossReference)cActionsAssignment_4_1.eContents().get(0);
		private final RuleCall cActionsActionEStringParserRuleCall_4_1_0_1 = (RuleCall)cActionsActionCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cActionsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cActionsActionCrossReference_4_2_1_0 = (CrossReference)cActionsAssignment_4_2_1.eContents().get(0);
		private final RuleCall cActionsActionEStringParserRuleCall_4_2_1_0_1 = (RuleCall)cActionsActionCrossReference_4_2_1_0.eContents().get(1);
		
		//Event returns Event:
		//    {Event}
		//    'Event'
		//    name=EString
		//        ('condition:' condition=[Condition|EString] )?
		//        ('actions:'  actions+=[Action|EString] ( "," actions+=[Action|EString])*  )?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Event}
		//'Event'
		//name=EString
		//    ('condition:' condition=[Condition|EString] )?
		//    ('actions:'  actions+=[Action|EString] ( "," actions+=[Action|EString])*  )?
		public Group getGroup() { return cGroup; }
		
		//{Event}
		public Action getEventAction_0() { return cEventAction_0; }
		
		//'Event'
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//('condition:' condition=[Condition|EString] )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'condition:'
		public Keyword getConditionKeyword_3_0() { return cConditionKeyword_3_0; }
		
		//condition=[Condition|EString]
		public Assignment getConditionAssignment_3_1() { return cConditionAssignment_3_1; }
		
		//[Condition|EString]
		public CrossReference getConditionConditionCrossReference_3_1_0() { return cConditionConditionCrossReference_3_1_0; }
		
		//EString
		public RuleCall getConditionConditionEStringParserRuleCall_3_1_0_1() { return cConditionConditionEStringParserRuleCall_3_1_0_1; }
		
		//('actions:'  actions+=[Action|EString] ( "," actions+=[Action|EString])*  )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'actions:'
		public Keyword getActionsKeyword_4_0() { return cActionsKeyword_4_0; }
		
		//actions+=[Action|EString]
		public Assignment getActionsAssignment_4_1() { return cActionsAssignment_4_1; }
		
		//[Action|EString]
		public CrossReference getActionsActionCrossReference_4_1_0() { return cActionsActionCrossReference_4_1_0; }
		
		//EString
		public RuleCall getActionsActionEStringParserRuleCall_4_1_0_1() { return cActionsActionEStringParserRuleCall_4_1_0_1; }
		
		//( "," actions+=[Action|EString])*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//actions+=[Action|EString]
		public Assignment getActionsAssignment_4_2_1() { return cActionsAssignment_4_2_1; }
		
		//[Action|EString]
		public CrossReference getActionsActionCrossReference_4_2_1_0() { return cActionsActionCrossReference_4_2_1_0; }
		
		//EString
		public RuleCall getActionsActionEStringParserRuleCall_4_2_1_0_1() { return cActionsActionEStringParserRuleCall_4_2_1_0_1; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cButtonParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSensorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSoundParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTapParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Condition returns Condition:
		//     Button | Sensor | Sound | Tap;
		@Override public ParserRule getRule() { return rule; }
		
		//Button | Sensor | Sound | Tap
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Button
		public RuleCall getButtonParserRuleCall_0() { return cButtonParserRuleCall_0; }
		
		//Sensor
		public RuleCall getSensorParserRuleCall_1() { return cSensorParserRuleCall_1; }
		
		//Sound
		public RuleCall getSoundParserRuleCall_2() { return cSoundParserRuleCall_2; }
		
		//Tap
		public RuleCall getTapParserRuleCall_3() { return cTapParserRuleCall_3; }
	}
	public class SoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Sound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSoundAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSoundKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionnameEStringParserRuleCall_2_0 = (RuleCall)cConditionnameAssignment_2.eContents().get(0);
		
		//Sound returns Sound:
		//    {Sound}
		//    'Sound'
		//    conditionname=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Sound}
		//'Sound'
		//conditionname=EString
		public Group getGroup() { return cGroup; }
		
		//{Sound}
		public Action getSoundAction_0() { return cSoundAction_0; }
		
		//'Sound'
		public Keyword getSoundKeyword_1() { return cSoundKeyword_1; }
		
		//conditionname=EString
		public Assignment getConditionnameAssignment_2() { return cConditionnameAssignment_2; }
		
		//EString
		public RuleCall getConditionnameEStringParserRuleCall_2_0() { return cConditionnameEStringParserRuleCall_2_0; }
	}
	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Button");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cButtonAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cButtonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionnameEStringParserRuleCall_2_0 = (RuleCall)cConditionnameAssignment_2.eContents().get(0);
		private final Keyword cButtonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cButtonAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cButtonButtonTypeEnumRuleCall_4_0 = (RuleCall)cButtonAssignment_4.eContents().get(0);
		
		//Button returns Button:
		//    {Button}
		//    'Button'
		//    conditionname=EString
		//        'button' button=ButtonType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Button}
		//'Button'
		//conditionname=EString
		//    'button' button=ButtonType
		public Group getGroup() { return cGroup; }
		
		//{Button}
		public Action getButtonAction_0() { return cButtonAction_0; }
		
		//'Button'
		public Keyword getButtonKeyword_1() { return cButtonKeyword_1; }
		
		//conditionname=EString
		public Assignment getConditionnameAssignment_2() { return cConditionnameAssignment_2; }
		
		//EString
		public RuleCall getConditionnameEStringParserRuleCall_2_0() { return cConditionnameEStringParserRuleCall_2_0; }
		
		//'button'
		public Keyword getButtonKeyword_3() { return cButtonKeyword_3; }
		
		//button=ButtonType
		public Assignment getButtonAssignment_4() { return cButtonAssignment_4; }
		
		//ButtonType
		public RuleCall getButtonButtonTypeEnumRuleCall_4_0() { return cButtonButtonTypeEnumRuleCall_4_0; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSensorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSensorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionnameEStringParserRuleCall_2_0 = (RuleCall)cConditionnameAssignment_2.eContents().get(0);
		private final Keyword cSensorPosKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSensorPosAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSensorPosEIntParserRuleCall_4_0 = (RuleCall)cSensorPosAssignment_4.eContents().get(0);
		
		//Sensor returns Sensor:
		//    {Sensor}
		//    'Sensor'
		//    conditionname=EString
		//        'sensorPos' sensorPos=EInt
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Sensor}
		//'Sensor'
		//conditionname=EString
		//    'sensorPos' sensorPos=EInt
		public Group getGroup() { return cGroup; }
		
		//{Sensor}
		public Action getSensorAction_0() { return cSensorAction_0; }
		
		//'Sensor'
		public Keyword getSensorKeyword_1() { return cSensorKeyword_1; }
		
		//conditionname=EString
		public Assignment getConditionnameAssignment_2() { return cConditionnameAssignment_2; }
		
		//EString
		public RuleCall getConditionnameEStringParserRuleCall_2_0() { return cConditionnameEStringParserRuleCall_2_0; }
		
		//'sensorPos'
		public Keyword getSensorPosKeyword_3() { return cSensorPosKeyword_3; }
		
		//sensorPos=EInt
		public Assignment getSensorPosAssignment_4() { return cSensorPosAssignment_4; }
		
		//EInt
		public RuleCall getSensorPosEIntParserRuleCall_4_0() { return cSensorPosEIntParserRuleCall_4_0; }
	}
	public class TapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Tap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTapAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTapKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionnameEStringParserRuleCall_2_0 = (RuleCall)cConditionnameAssignment_2.eContents().get(0);
		
		//Tap returns Tap:
		//    {Tap}
		//    'Tap'
		//    conditionname=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Tap}
		//'Tap'
		//conditionname=EString
		public Group getGroup() { return cGroup; }
		
		//{Tap}
		public Action getTapAction_0() { return cTapAction_0; }
		
		//'Tap'
		public Keyword getTapKeyword_1() { return cTapKeyword_1; }
		
		//conditionname=EString
		public Assignment getConditionnameAssignment_2() { return cConditionnameAssignment_2; }
		
		//EString
		public RuleCall getConditionnameEStringParserRuleCall_2_0() { return cConditionnameEStringParserRuleCall_2_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMotorActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSoundActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLightActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Action returns Action:
		//     MotorAction | SoundAction | LightAction;
		@Override public ParserRule getRule() { return rule; }
		
		//MotorAction | SoundAction | LightAction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MotorAction
		public RuleCall getMotorActionParserRuleCall_0() { return cMotorActionParserRuleCall_0; }
		
		//SoundAction
		public RuleCall getSoundActionParserRuleCall_1() { return cSoundActionParserRuleCall_1; }
		
		//LightAction
		public RuleCall getLightActionParserRuleCall_2() { return cLightActionParserRuleCall_2; }
	}
	public class MotorActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.MotorAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMotorActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMotorActionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActionnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionnameEStringParserRuleCall_2_0 = (RuleCall)cActionnameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMotorLeftKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMotorLeftAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMotorLeftEIntParserRuleCall_3_1_0 = (RuleCall)cMotorLeftAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cMotorRightKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMotorRightAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMotorRightEIntParserRuleCall_4_1_0 = (RuleCall)cMotorRightAssignment_4_1.eContents().get(0);
		
		//MotorAction returns MotorAction:
		//    {MotorAction}
		//    'MotorAction'
		//    actionname=EString
		//        ('motorLeft' motorLeft=EInt)
		//        ('motorRight' motorRight=EInt)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{MotorAction}
		//'MotorAction'
		//actionname=EString
		//    ('motorLeft' motorLeft=EInt)
		//    ('motorRight' motorRight=EInt)
		public Group getGroup() { return cGroup; }
		
		//{MotorAction}
		public Action getMotorActionAction_0() { return cMotorActionAction_0; }
		
		//'MotorAction'
		public Keyword getMotorActionKeyword_1() { return cMotorActionKeyword_1; }
		
		//actionname=EString
		public Assignment getActionnameAssignment_2() { return cActionnameAssignment_2; }
		
		//EString
		public RuleCall getActionnameEStringParserRuleCall_2_0() { return cActionnameEStringParserRuleCall_2_0; }
		
		//('motorLeft' motorLeft=EInt)
		public Group getGroup_3() { return cGroup_3; }
		
		//'motorLeft'
		public Keyword getMotorLeftKeyword_3_0() { return cMotorLeftKeyword_3_0; }
		
		//motorLeft=EInt
		public Assignment getMotorLeftAssignment_3_1() { return cMotorLeftAssignment_3_1; }
		
		//EInt
		public RuleCall getMotorLeftEIntParserRuleCall_3_1_0() { return cMotorLeftEIntParserRuleCall_3_1_0; }
		
		//('motorRight' motorRight=EInt)
		public Group getGroup_4() { return cGroup_4; }
		
		//'motorRight'
		public Keyword getMotorRightKeyword_4_0() { return cMotorRightKeyword_4_0; }
		
		//motorRight=EInt
		public Assignment getMotorRightAssignment_4_1() { return cMotorRightAssignment_4_1; }
		
		//EInt
		public RuleCall getMotorRightEIntParserRuleCall_4_1_0() { return cMotorRightEIntParserRuleCall_4_1_0; }
	}
	public class SoundActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.SoundAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSoundActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSoundActionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActionnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionnameEStringParserRuleCall_2_0 = (RuleCall)cActionnameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSetKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMusicsettingsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMusicsettingsMusicSettingParserRuleCall_3_1_0 = (RuleCall)cMusicsettingsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cMusicsettingsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cMusicsettingsMusicSettingParserRuleCall_3_2_1_0 = (RuleCall)cMusicsettingsAssignment_3_2_1.eContents().get(0);
		
		//SoundAction returns SoundAction:
		//    {SoundAction}
		//    'SoundAction'
		//    actionname=EString
		//    ('set:' musicsettings+=MusicSetting (',' musicsettings+=MusicSetting)*)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SoundAction}
		//'SoundAction'
		//actionname=EString
		//('set:' musicsettings+=MusicSetting (',' musicsettings+=MusicSetting)*)?
		public Group getGroup() { return cGroup; }
		
		//{SoundAction}
		public Action getSoundActionAction_0() { return cSoundActionAction_0; }
		
		//'SoundAction'
		public Keyword getSoundActionKeyword_1() { return cSoundActionKeyword_1; }
		
		//actionname=EString
		public Assignment getActionnameAssignment_2() { return cActionnameAssignment_2; }
		
		//EString
		public RuleCall getActionnameEStringParserRuleCall_2_0() { return cActionnameEStringParserRuleCall_2_0; }
		
		//('set:' musicsettings+=MusicSetting (',' musicsettings+=MusicSetting)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'set:'
		public Keyword getSetKeyword_3_0() { return cSetKeyword_3_0; }
		
		//musicsettings+=MusicSetting
		public Assignment getMusicsettingsAssignment_3_1() { return cMusicsettingsAssignment_3_1; }
		
		//MusicSetting
		public RuleCall getMusicsettingsMusicSettingParserRuleCall_3_1_0() { return cMusicsettingsMusicSettingParserRuleCall_3_1_0; }
		
		//(',' musicsettings+=MusicSetting)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//musicsettings+=MusicSetting
		public Assignment getMusicsettingsAssignment_3_2_1() { return cMusicsettingsAssignment_3_2_1; }
		
		//MusicSetting
		public RuleCall getMusicsettingsMusicSettingParserRuleCall_3_2_1_0() { return cMusicsettingsMusicSettingParserRuleCall_3_2_1_0; }
	}
	public class LightActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.LightAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLightActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLightActionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActionnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionnameEStringParserRuleCall_2_0 = (RuleCall)cActionnameAssignment_2.eContents().get(0);
		private final Keyword cPosKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPosAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPosLightPosEnumRuleCall_4_0 = (RuleCall)cPosAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRedKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRedAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRedEIntParserRuleCall_5_1_0 = (RuleCall)cRedAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cGreenKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cGreenAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cGreenEIntParserRuleCall_6_1_0 = (RuleCall)cGreenAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cBlueKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cBlueAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cBlueEIntParserRuleCall_7_1_0 = (RuleCall)cBlueAssignment_7_1.eContents().get(0);
		
		//LightAction returns LightAction:
		//    {LightAction}
		//    'LightAction'
		//    actionname=EString
		//    'pos:' pos=LightPos
		//    ('red:' red=EInt)?
		//    ('green:' green=EInt)?
		//    ('blue:' blue=EInt)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{LightAction}
		//'LightAction'
		//actionname=EString
		//'pos:' pos=LightPos
		//('red:' red=EInt)?
		//('green:' green=EInt)?
		//('blue:' blue=EInt)?
		public Group getGroup() { return cGroup; }
		
		//{LightAction}
		public Action getLightActionAction_0() { return cLightActionAction_0; }
		
		//'LightAction'
		public Keyword getLightActionKeyword_1() { return cLightActionKeyword_1; }
		
		//actionname=EString
		public Assignment getActionnameAssignment_2() { return cActionnameAssignment_2; }
		
		//EString
		public RuleCall getActionnameEStringParserRuleCall_2_0() { return cActionnameEStringParserRuleCall_2_0; }
		
		//'pos:'
		public Keyword getPosKeyword_3() { return cPosKeyword_3; }
		
		//pos=LightPos
		public Assignment getPosAssignment_4() { return cPosAssignment_4; }
		
		//LightPos
		public RuleCall getPosLightPosEnumRuleCall_4_0() { return cPosLightPosEnumRuleCall_4_0; }
		
		//('red:' red=EInt)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'red:'
		public Keyword getRedKeyword_5_0() { return cRedKeyword_5_0; }
		
		//red=EInt
		public Assignment getRedAssignment_5_1() { return cRedAssignment_5_1; }
		
		//EInt
		public RuleCall getRedEIntParserRuleCall_5_1_0() { return cRedEIntParserRuleCall_5_1_0; }
		
		//('green:' green=EInt)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'green:'
		public Keyword getGreenKeyword_6_0() { return cGreenKeyword_6_0; }
		
		//green=EInt
		public Assignment getGreenAssignment_6_1() { return cGreenAssignment_6_1; }
		
		//EInt
		public RuleCall getGreenEIntParserRuleCall_6_1_0() { return cGreenEIntParserRuleCall_6_1_0; }
		
		//('blue:' blue=EInt)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'blue:'
		public Keyword getBlueKeyword_7_0() { return cBlueKeyword_7_0; }
		
		//blue=EInt
		public Assignment getBlueAssignment_7_1() { return cBlueAssignment_7_1; }
		
		//EInt
		public RuleCall getBlueEIntParserRuleCall_7_1_0() { return cBlueEIntParserRuleCall_7_1_0; }
	}
	public class MusicSettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.MusicSetting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNoteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNoteEIntParserRuleCall_1_0 = (RuleCall)cNoteAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDurationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDurationDurationEnumRuleCall_3_0 = (RuleCall)cDurationAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPosAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPosEIntParserRuleCall_5_0 = (RuleCall)cPosAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//MusicSetting returns MusicSetting:
		//    '(' note=EInt ',' duration=Duration ',' pos=EInt')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' note=EInt ',' duration=Duration ',' pos=EInt')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//note=EInt
		public Assignment getNoteAssignment_1() { return cNoteAssignment_1; }
		
		//EInt
		public RuleCall getNoteEIntParserRuleCall_1_0() { return cNoteEIntParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//duration=Duration
		public Assignment getDurationAssignment_3() { return cDurationAssignment_3; }
		
		//Duration
		public RuleCall getDurationDurationEnumRuleCall_3_0() { return cDurationDurationEnumRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//pos=EInt
		public Assignment getPosAssignment_5() { return cPosAssignment_5; }
		
		//EInt
		public RuleCall getPosEIntParserRuleCall_5_0() { return cPosEIntParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	public class DurationElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Duration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONENONEKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMEDIUMEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMEDIUMMEDIUMKeyword_1_0 = (Keyword)cMEDIUMEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLONGEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLONGLONGKeyword_2_0 = (Keyword)cLONGEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Duration returns Duration:
		//    NONE = 'NONE' | MEDIUM = 'MEDIUM' | LONG = 'LONG'
		//;
		public EnumRule getRule() { return rule; }
		
		//NONE = 'NONE' | MEDIUM = 'MEDIUM' | LONG = 'LONG'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NONE = 'NONE'
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }
		
		//'NONE'
		public Keyword getNONENONEKeyword_0_0() { return cNONENONEKeyword_0_0; }
		
		//MEDIUM = 'MEDIUM'
		public EnumLiteralDeclaration getMEDIUMEnumLiteralDeclaration_1() { return cMEDIUMEnumLiteralDeclaration_1; }
		
		//'MEDIUM'
		public Keyword getMEDIUMMEDIUMKeyword_1_0() { return cMEDIUMMEDIUMKeyword_1_0; }
		
		//LONG = 'LONG'
		public EnumLiteralDeclaration getLONGEnumLiteralDeclaration_2() { return cLONGEnumLiteralDeclaration_2; }
		
		//'LONG'
		public Keyword getLONGLONGKeyword_2_0() { return cLONGLONGKeyword_2_0; }
	}
	public class LightPosElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.LightPos");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTOPEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTOPTOPKeyword_0_0 = (Keyword)cTOPEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBOTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBOTBOTKeyword_1_0 = (Keyword)cBOTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LightPos returns LightPos:
		//    TOP = 'TOP' | BOT = 'BOT'
		//;
		public EnumRule getRule() { return rule; }
		
		//TOP = 'TOP' | BOT = 'BOT'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TOP = 'TOP'
		public EnumLiteralDeclaration getTOPEnumLiteralDeclaration_0() { return cTOPEnumLiteralDeclaration_0; }
		
		//'TOP'
		public Keyword getTOPTOPKeyword_0_0() { return cTOPTOPKeyword_0_0; }
		
		//BOT = 'BOT'
		public EnumLiteralDeclaration getBOTEnumLiteralDeclaration_1() { return cBOTEnumLiteralDeclaration_1; }
		
		//'BOT'
		public Keyword getBOTBOTKeyword_1_0() { return cBOTBOTKeyword_1_0; }
	}
	public class ButtonTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ButtonType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBACKWARDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBACKWARDBACKWARDKeyword_0_0 = (Keyword)cBACKWARDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLEFTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLEFTLEFTKeyword_1_0 = (Keyword)cLEFTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRIGHTRIGHTKeyword_2_0 = (Keyword)cRIGHTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCENTEREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCENTERCENTERKeyword_3_0 = (Keyword)cCENTEREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFORWARDEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFORWARDFORWARDKeyword_4_0 = (Keyword)cFORWARDEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ButtonType returns ButtonType:
		//                BACKWARD = 'BACKWARD' | LEFT = 'LEFT' | RIGHT = 'RIGHT' | CENTER = 'CENTER' | FORWARD = 'FORWARD';
		public EnumRule getRule() { return rule; }
		
		//BACKWARD = 'BACKWARD' | LEFT = 'LEFT' | RIGHT = 'RIGHT' | CENTER = 'CENTER' | FORWARD = 'FORWARD'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BACKWARD = 'BACKWARD'
		public EnumLiteralDeclaration getBACKWARDEnumLiteralDeclaration_0() { return cBACKWARDEnumLiteralDeclaration_0; }
		
		//'BACKWARD'
		public Keyword getBACKWARDBACKWARDKeyword_0_0() { return cBACKWARDBACKWARDKeyword_0_0; }
		
		//LEFT = 'LEFT'
		public EnumLiteralDeclaration getLEFTEnumLiteralDeclaration_1() { return cLEFTEnumLiteralDeclaration_1; }
		
		//'LEFT'
		public Keyword getLEFTLEFTKeyword_1_0() { return cLEFTLEFTKeyword_1_0; }
		
		//RIGHT = 'RIGHT'
		public EnumLiteralDeclaration getRIGHTEnumLiteralDeclaration_2() { return cRIGHTEnumLiteralDeclaration_2; }
		
		//'RIGHT'
		public Keyword getRIGHTRIGHTKeyword_2_0() { return cRIGHTRIGHTKeyword_2_0; }
		
		//CENTER = 'CENTER'
		public EnumLiteralDeclaration getCENTEREnumLiteralDeclaration_3() { return cCENTEREnumLiteralDeclaration_3; }
		
		//'CENTER'
		public Keyword getCENTERCENTERKeyword_3_0() { return cCENTERCENTERKeyword_3_0; }
		
		//FORWARD = 'FORWARD'
		public EnumLiteralDeclaration getFORWARDEnumLiteralDeclaration_4() { return cFORWARDEnumLiteralDeclaration_4; }
		
		//'FORWARD'
		public Keyword getFORWARDFORWARDKeyword_4_0() { return cFORWARDFORWARDKeyword_4_0; }
	}
	
	private final RobotModelElements pRobotModel;
	private final EventElements pEvent;
	private final ConditionElements pCondition;
	private final SoundElements pSound;
	private final ButtonElements pButton;
	private final SensorElements pSensor;
	private final TapElements pTap;
	private final ActionElements pAction;
	private final MotorActionElements pMotorAction;
	private final SoundActionElements pSoundAction;
	private final LightActionElements pLightAction;
	private final MusicSettingElements pMusicSetting;
	private final EIntElements pEInt;
	private final EStringElements pEString;
	private final DurationElements eDuration;
	private final LightPosElements eLightPos;
	private final ButtonTypeElements eButtonType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRobotModel = new RobotModelElements();
		this.pEvent = new EventElements();
		this.pCondition = new ConditionElements();
		this.pSound = new SoundElements();
		this.pButton = new ButtonElements();
		this.pSensor = new SensorElements();
		this.pTap = new TapElements();
		this.pAction = new ActionElements();
		this.pMotorAction = new MotorActionElements();
		this.pSoundAction = new SoundActionElements();
		this.pLightAction = new LightActionElements();
		this.pMusicSetting = new MusicSettingElements();
		this.pEInt = new EIntElements();
		this.pEString = new EStringElements();
		this.eDuration = new DurationElements();
		this.eLightPos = new LightPosElements();
		this.eButtonType = new ButtonTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl1.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RobotModel returns RobotModel:
	//    {RobotModel}
	//        ((events+=Event  )|
	//        ('Action:' '-' actions+=Action ('-' actions+=Action)*) |
	//        ('Condition:' '-'  conditions+=Condition ('-' conditions+=Condition)*) )*
	//;
	public RobotModelElements getRobotModelAccess() {
		return pRobotModel;
	}
	
	public ParserRule getRobotModelRule() {
		return getRobotModelAccess().getRule();
	}
	
	//Event returns Event:
	//    {Event}
	//    'Event'
	//    name=EString
	//        ('condition:' condition=[Condition|EString] )?
	//        ('actions:'  actions+=[Action|EString] ( "," actions+=[Action|EString])*  )?
	//    ;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//Condition returns Condition:
	//     Button | Sensor | Sound | Tap;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Sound returns Sound:
	//    {Sound}
	//    'Sound'
	//    conditionname=EString
	//;
	public SoundElements getSoundAccess() {
		return pSound;
	}
	
	public ParserRule getSoundRule() {
		return getSoundAccess().getRule();
	}
	
	//Button returns Button:
	//    {Button}
	//    'Button'
	//    conditionname=EString
	//        'button' button=ButtonType
	//;
	public ButtonElements getButtonAccess() {
		return pButton;
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}
	
	//Sensor returns Sensor:
	//    {Sensor}
	//    'Sensor'
	//    conditionname=EString
	//        'sensorPos' sensorPos=EInt
	//;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//Tap returns Tap:
	//    {Tap}
	//    'Tap'
	//    conditionname=EString
	//;
	public TapElements getTapAccess() {
		return pTap;
	}
	
	public ParserRule getTapRule() {
		return getTapAccess().getRule();
	}
	
	//Action returns Action:
	//     MotorAction | SoundAction | LightAction;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//MotorAction returns MotorAction:
	//    {MotorAction}
	//    'MotorAction'
	//    actionname=EString
	//        ('motorLeft' motorLeft=EInt)
	//        ('motorRight' motorRight=EInt)
	//;
	public MotorActionElements getMotorActionAccess() {
		return pMotorAction;
	}
	
	public ParserRule getMotorActionRule() {
		return getMotorActionAccess().getRule();
	}
	
	//SoundAction returns SoundAction:
	//    {SoundAction}
	//    'SoundAction'
	//    actionname=EString
	//    ('set:' musicsettings+=MusicSetting (',' musicsettings+=MusicSetting)*)?
	//;
	public SoundActionElements getSoundActionAccess() {
		return pSoundAction;
	}
	
	public ParserRule getSoundActionRule() {
		return getSoundActionAccess().getRule();
	}
	
	//LightAction returns LightAction:
	//    {LightAction}
	//    'LightAction'
	//    actionname=EString
	//    'pos:' pos=LightPos
	//    ('red:' red=EInt)?
	//    ('green:' green=EInt)?
	//    ('blue:' blue=EInt)?
	//;
	public LightActionElements getLightActionAccess() {
		return pLightAction;
	}
	
	public ParserRule getLightActionRule() {
		return getLightActionAccess().getRule();
	}
	
	//MusicSetting returns MusicSetting:
	//    '(' note=EInt ',' duration=Duration ',' pos=EInt')'
	//;
	public MusicSettingElements getMusicSettingAccess() {
		return pMusicSetting;
	}
	
	public ParserRule getMusicSettingRule() {
		return getMusicSettingAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//enum Duration returns Duration:
	//    NONE = 'NONE' | MEDIUM = 'MEDIUM' | LONG = 'LONG'
	//;
	public DurationElements getDurationAccess() {
		return eDuration;
	}
	
	public EnumRule getDurationRule() {
		return getDurationAccess().getRule();
	}
	
	//enum LightPos returns LightPos:
	//    TOP = 'TOP' | BOT = 'BOT'
	//;
	public LightPosElements getLightPosAccess() {
		return eLightPos;
	}
	
	public EnumRule getLightPosRule() {
		return getLightPosAccess().getRule();
	}
	
	//enum ButtonType returns ButtonType:
	//                BACKWARD = 'BACKWARD' | LEFT = 'LEFT' | RIGHT = 'RIGHT' | CENTER = 'CENTER' | FORWARD = 'FORWARD';
	public ButtonTypeElements getButtonTypeAccess() {
		return eButtonType;
	}
	
	public EnumRule getButtonTypeRule() {
		return getButtonTypeAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
