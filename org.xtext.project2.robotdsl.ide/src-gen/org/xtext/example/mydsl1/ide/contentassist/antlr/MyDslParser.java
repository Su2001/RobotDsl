/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.mydsl1.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl1.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl1.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getRobotModelAccess().getAlternatives_1(), "rule__RobotModel__Alternatives_1");
			builder.put(grammarAccess.getPlusOrMinusAccess().getOperationAlternatives_1_0_1_0(), "rule__PlusOrMinus__OperationAlternatives_1_0_1_0");
			builder.put(grammarAccess.getMultOrDivAccess().getOperationAlternatives_1_1_0(), "rule__MultOrDiv__OperationAlternatives_1_1_0");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
			builder.put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getDurationAccess().getAlternatives(), "rule__Duration__Alternatives");
			builder.put(grammarAccess.getLightPosAccess().getAlternatives(), "rule__LightPos__Alternatives");
			builder.put(grammarAccess.getDistanceAccess().getAlternatives(), "rule__Distance__Alternatives");
			builder.put(grammarAccess.getButtonTypeAccess().getAlternatives(), "rule__ButtonType__Alternatives");
			builder.put(grammarAccess.getRobotModelAccess().getGroup(), "rule__RobotModel__Group__0");
			builder.put(grammarAccess.getRobotModelAccess().getGroup_1_1(), "rule__RobotModel__Group_1_1__0");
			builder.put(grammarAccess.getRobotModelAccess().getGroup_1_1_3(), "rule__RobotModel__Group_1_1_3__0");
			builder.put(grammarAccess.getRobotModelAccess().getGroup_1_2(), "rule__RobotModel__Group_1_2__0");
			builder.put(grammarAccess.getRobotModelAccess().getGroup_1_2_3(), "rule__RobotModel__Group_1_2_3__0");
			builder.put(grammarAccess.getPlusOrMinusAccess().getGroup(), "rule__PlusOrMinus__Group__0");
			builder.put(grammarAccess.getPlusOrMinusAccess().getGroup_1(), "rule__PlusOrMinus__Group_1__0");
			builder.put(grammarAccess.getPlusOrMinusAccess().getGroup_1_0(), "rule__PlusOrMinus__Group_1_0__0");
			builder.put(grammarAccess.getMultOrDivAccess().getGroup(), "rule__MultOrDiv__Group__0");
			builder.put(grammarAccess.getMultOrDivAccess().getGroup_1(), "rule__MultOrDiv__Group_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_0(), "rule__Primary__Group_0__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup(), "rule__Atomic__Group__0");
			builder.put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
			builder.put(grammarAccess.getEventAccess().getGroup_3(), "rule__Event__Group_3__0");
			builder.put(grammarAccess.getEventAccess().getGroup_3_2(), "rule__Event__Group_3_2__0");
			builder.put(grammarAccess.getEventAccess().getGroup_4(), "rule__Event__Group_4__0");
			builder.put(grammarAccess.getEventAccess().getGroup_4_2(), "rule__Event__Group_4_2__0");
			builder.put(grammarAccess.getSoundAccess().getGroup(), "rule__Sound__Group__0");
			builder.put(grammarAccess.getButtonAccess().getGroup(), "rule__Button__Group__0");
			builder.put(grammarAccess.getSensorAccess().getGroup(), "rule__Sensor__Group__0");
			builder.put(grammarAccess.getTapAccess().getGroup(), "rule__Tap__Group__0");
			builder.put(grammarAccess.getMotorActionAccess().getGroup(), "rule__MotorAction__Group__0");
			builder.put(grammarAccess.getMotorActionAccess().getGroup_3(), "rule__MotorAction__Group_3__0");
			builder.put(grammarAccess.getMotorActionAccess().getGroup_4(), "rule__MotorAction__Group_4__0");
			builder.put(grammarAccess.getSoundActionAccess().getGroup(), "rule__SoundAction__Group__0");
			builder.put(grammarAccess.getSoundActionAccess().getGroup_3(), "rule__SoundAction__Group_3__0");
			builder.put(grammarAccess.getSoundActionAccess().getGroup_3_2(), "rule__SoundAction__Group_3_2__0");
			builder.put(grammarAccess.getLightActionAccess().getGroup(), "rule__LightAction__Group__0");
			builder.put(grammarAccess.getLightActionAccess().getGroup_5(), "rule__LightAction__Group_5__0");
			builder.put(grammarAccess.getLightActionAccess().getGroup_6(), "rule__LightAction__Group_6__0");
			builder.put(grammarAccess.getLightActionAccess().getGroup_7(), "rule__LightAction__Group_7__0");
			builder.put(grammarAccess.getMusicSettingAccess().getGroup(), "rule__MusicSetting__Group__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getRobotModelAccess().getEventsAssignment_1_0(), "rule__RobotModel__EventsAssignment_1_0");
			builder.put(grammarAccess.getRobotModelAccess().getActionsAssignment_1_1_2(), "rule__RobotModel__ActionsAssignment_1_1_2");
			builder.put(grammarAccess.getRobotModelAccess().getActionsAssignment_1_1_3_1(), "rule__RobotModel__ActionsAssignment_1_1_3_1");
			builder.put(grammarAccess.getRobotModelAccess().getConditionsAssignment_1_2_2(), "rule__RobotModel__ConditionsAssignment_1_2_2");
			builder.put(grammarAccess.getRobotModelAccess().getConditionsAssignment_1_2_3_1(), "rule__RobotModel__ConditionsAssignment_1_2_3_1");
			builder.put(grammarAccess.getRobotModelAccess().getExpressionsAssignment_1_3(), "rule__RobotModel__ExpressionsAssignment_1_3");
			builder.put(grammarAccess.getPlusOrMinusAccess().getOperationAssignment_1_0_1(), "rule__PlusOrMinus__OperationAssignment_1_0_1");
			builder.put(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_1(), "rule__PlusOrMinus__RightAssignment_1_1");
			builder.put(grammarAccess.getMultOrDivAccess().getOperationAssignment_1_1(), "rule__MultOrDiv__OperationAssignment_1_1");
			builder.put(grammarAccess.getMultOrDivAccess().getRightAssignment_1_2(), "rule__MultOrDiv__RightAssignment_1_2");
			builder.put(grammarAccess.getAtomicAccess().getValueAssignment_1(), "rule__Atomic__ValueAssignment_1");
			builder.put(grammarAccess.getEventAccess().getNameAssignment_2(), "rule__Event__NameAssignment_2");
			builder.put(grammarAccess.getEventAccess().getConditionsAssignment_3_1(), "rule__Event__ConditionsAssignment_3_1");
			builder.put(grammarAccess.getEventAccess().getConditionsAssignment_3_2_1(), "rule__Event__ConditionsAssignment_3_2_1");
			builder.put(grammarAccess.getEventAccess().getActionsAssignment_4_1(), "rule__Event__ActionsAssignment_4_1");
			builder.put(grammarAccess.getEventAccess().getActionsAssignment_4_2_1(), "rule__Event__ActionsAssignment_4_2_1");
			builder.put(grammarAccess.getSoundAccess().getConditionnameAssignment_2(), "rule__Sound__ConditionnameAssignment_2");
			builder.put(grammarAccess.getButtonAccess().getConditionnameAssignment_2(), "rule__Button__ConditionnameAssignment_2");
			builder.put(grammarAccess.getButtonAccess().getButtonAssignment_3(), "rule__Button__ButtonAssignment_3");
			builder.put(grammarAccess.getSensorAccess().getConditionnameAssignment_2(), "rule__Sensor__ConditionnameAssignment_2");
			builder.put(grammarAccess.getSensorAccess().getPosExAssignment_4(), "rule__Sensor__PosExAssignment_4");
			builder.put(grammarAccess.getSensorAccess().getDistanceAssignment_6(), "rule__Sensor__DistanceAssignment_6");
			builder.put(grammarAccess.getTapAccess().getConditionnameAssignment_2(), "rule__Tap__ConditionnameAssignment_2");
			builder.put(grammarAccess.getMotorActionAccess().getActionnameAssignment_2(), "rule__MotorAction__ActionnameAssignment_2");
			builder.put(grammarAccess.getMotorActionAccess().getLeftAssignment_3_1(), "rule__MotorAction__LeftAssignment_3_1");
			builder.put(grammarAccess.getMotorActionAccess().getRightAssignment_4_1(), "rule__MotorAction__RightAssignment_4_1");
			builder.put(grammarAccess.getSoundActionAccess().getActionnameAssignment_2(), "rule__SoundAction__ActionnameAssignment_2");
			builder.put(grammarAccess.getSoundActionAccess().getMusicsettingsAssignment_3_1(), "rule__SoundAction__MusicsettingsAssignment_3_1");
			builder.put(grammarAccess.getSoundActionAccess().getMusicsettingsAssignment_3_2_1(), "rule__SoundAction__MusicsettingsAssignment_3_2_1");
			builder.put(grammarAccess.getLightActionAccess().getActionnameAssignment_2(), "rule__LightAction__ActionnameAssignment_2");
			builder.put(grammarAccess.getLightActionAccess().getPosAssignment_4(), "rule__LightAction__PosAssignment_4");
			builder.put(grammarAccess.getLightActionAccess().getRedExAssignment_5_1(), "rule__LightAction__RedExAssignment_5_1");
			builder.put(grammarAccess.getLightActionAccess().getGreenExAssignment_6_1(), "rule__LightAction__GreenExAssignment_6_1");
			builder.put(grammarAccess.getLightActionAccess().getBlueExAssignment_7_1(), "rule__LightAction__BlueExAssignment_7_1");
			builder.put(grammarAccess.getMusicSettingAccess().getNoteExAssignment_2(), "rule__MusicSetting__NoteExAssignment_2");
			builder.put(grammarAccess.getMusicSettingAccess().getDurationAssignment_4(), "rule__MusicSetting__DurationAssignment_4");
			builder.put(grammarAccess.getMusicSettingAccess().getPosExAssignment_6(), "rule__MusicSetting__PosExAssignment_6");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
