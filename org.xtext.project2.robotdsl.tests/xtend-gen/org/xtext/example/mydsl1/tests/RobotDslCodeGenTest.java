package org.xtext.example.mydsl1.tests;

import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.util.ReflectExtensions;
import org.eclipse.xtext.xbase.testing.CompilationTestHelper;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(MyDslInjectorProvider.class)
@SuppressWarnings("all")
public class RobotDslCodeGenTest {
  @Inject
  @Extension
  private CompilationTestHelper _compilationTestHelper;

  @Inject
  @Extension
  private ReflectExtensions _reflectExtensions;

  @Test
  public void testAsebaFile() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Condition: ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("- Button left CENTER");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("-Sensor sener");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("sensorPosition 2");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("detectObstacle OBSTACLE");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("-Tap tap");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("-Sound s   ");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Action:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("- MotorAction goLeft");
      _builder.newLine();
      _builder.append("\t \t");
      _builder.append("motorLeft 300  ");
      _builder.newLine();
      _builder.append("\t \t");
      _builder.append("motorRight 10");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("- LightAction light2");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("position: TOP");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("red: 22");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("green: 24");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("blue: 31");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("- SoundAction sounda");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("set: (1,LONG,3),(1,MEDIUM,1),(2,LONG,2) ");
      _builder.newLine();
      _builder.append("   ");
      _builder.newLine();
      _builder.append("Event a");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("conditions: left actions: goLeft");
      _builder.newLine();
      _builder.append("Event a2");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("conditions: sener ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("actions: light2");
      _builder.newLine();
      _builder.append("Event a3");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("conditions: s actions: sounda");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("# variables for notes");
      _builder_1.newLine();
      _builder_1.append("var notes[6]");
      _builder_1.newLine();
      _builder_1.append("var durations[6]");
      _builder_1.newLine();
      _builder_1.append("var note_index = 6");
      _builder_1.newLine();
      _builder_1.append("var note_count = 6");
      _builder_1.newLine();
      _builder_1.append("var wave[142]");
      _builder_1.newLine();
      _builder_1.append("var i");
      _builder_1.newLine();
      _builder_1.append("var wave_phase");
      _builder_1.newLine();
      _builder_1.append("var wave_intensity");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("# compute a sinus wave for sound");
      _builder_1.newLine();
      _builder_1.append("for i in 0:141 do");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("wave_phase = (i-70)*468");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("call math.cos(wave_intensity, wave_phase)");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("wave[i] = wave_intensity/256");
      _builder_1.newLine();
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.append("call sound.wave(wave)");
      _builder_1.newLine();
      _builder_1.append("# reset outputs");
      _builder_1.newLine();
      _builder_1.append("call sound.system(-1)");
      _builder_1.newLine();
      _builder_1.append("call leds.top(0,0,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.left(0,0,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.right(0,0,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.circle(0,0,0,0,0,0,0,0)");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("# when a note is finished, play the next note");
      _builder_1.newLine();
      _builder_1.append("onevent sound.finished");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if note_index != note_count then");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("call sound.freq(notes[note_index], durations[note_index])");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("note_index += 1");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("onevent mic");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("call math.copy(notes[0:5], [262, 311, 262, 0, 0, 0])");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("call math.copy(durations[0:5], [7, 14, 14, 0, 0, 0])");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("note_index = 1");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("note_count = 6");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("call sound.freq(notes[0], durations[0])");
      _builder_1.newLine();
      _builder_1.append("onevent prox");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("when prox.horizontal[1]  >= 2000  do");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t\t\t\t");
      _builder_1.append("call leds.top(22 , 24, 31)");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.append("onevent buttons");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("when button.center == 1 do");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t\t\t\t");
      _builder_1.append("motor.left.target = 300");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t\t\t\t");
      _builder_1.append("motor.right.target = 10");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testAsebaFileWithAritmetics() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Condition: ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("- Button left CENTER");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("-Sensor sener");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("sensorPosition 1+1");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("detectObstacle OBSTACLE");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("-Tap tap");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("-Sound s   ");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Action:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("- MotorAction goLeft");
      _builder.newLine();
      _builder.append("\t \t");
      _builder.append("motorLeft 150*2  ");
      _builder.newLine();
      _builder.append("\t \t");
      _builder.append("motorRight 10");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("- LightAction light2");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("position: TOP");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("red: 22");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("green: 12*2");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("blue: 31");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("- SoundAction sounda");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("set: (1,LONG,3),(1,MEDIUM,1),(2,LONG,2) ");
      _builder.newLine();
      _builder.append("   ");
      _builder.newLine();
      _builder.append("Event a");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("conditions: left actions: goLeft");
      _builder.newLine();
      _builder.append("Event a2");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("conditions: sener ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("actions: light2");
      _builder.newLine();
      _builder.append("Event a3");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("conditions: s actions: sounda");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("# variables for notes");
      _builder_1.newLine();
      _builder_1.append("var notes[6]");
      _builder_1.newLine();
      _builder_1.append("var durations[6]");
      _builder_1.newLine();
      _builder_1.append("var note_index = 6");
      _builder_1.newLine();
      _builder_1.append("var note_count = 6");
      _builder_1.newLine();
      _builder_1.append("var wave[142]");
      _builder_1.newLine();
      _builder_1.append("var i");
      _builder_1.newLine();
      _builder_1.append("var wave_phase");
      _builder_1.newLine();
      _builder_1.append("var wave_intensity");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("# compute a sinus wave for sound");
      _builder_1.newLine();
      _builder_1.append("for i in 0:141 do");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("wave_phase = (i-70)*468");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("call math.cos(wave_intensity, wave_phase)");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("wave[i] = wave_intensity/256");
      _builder_1.newLine();
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.append("call sound.wave(wave)");
      _builder_1.newLine();
      _builder_1.append("# reset outputs");
      _builder_1.newLine();
      _builder_1.append("call sound.system(-1)");
      _builder_1.newLine();
      _builder_1.append("call leds.top(0,0,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.left(0,0,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.right(0,0,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.circle(0,0,0,0,0,0,0,0)");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("# when a note is finished, play the next note");
      _builder_1.newLine();
      _builder_1.append("onevent sound.finished");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if note_index != note_count then");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("call sound.freq(notes[note_index], durations[note_index])");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("note_index += 1");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("onevent mic");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("call math.copy(notes[0:5], [262, 311, 262, 0, 0, 0])");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("call math.copy(durations[0:5], [7, 14, 14, 0, 0, 0])");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("note_index = 1");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("note_count = 6");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("call sound.freq(notes[0], durations[0])");
      _builder_1.newLine();
      _builder_1.append("onevent prox");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("when prox.horizontal[1]  >= 2000  do");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t\t\t\t");
      _builder_1.append("call leds.top(22 , 24, 31)");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.append("onevent buttons");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("when button.center == 1 do");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t\t\t\t");
      _builder_1.append("motor.left.target = 300");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t\t\t\t");
      _builder_1.append("motor.right.target = 10");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testAsebaFileWithNoEvent() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Condition: ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("- Button left CENTER");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("-Sensor sener");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("sensorPosition 2");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("detectObstacle OBSTACLE");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("-Tap tap");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("-Sound s   ");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Action:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("- MotorAction goLeft");
      _builder.newLine();
      _builder.append("\t \t");
      _builder.append("motorLeft 300  ");
      _builder.newLine();
      _builder.append("\t \t");
      _builder.append("motorRight 10");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("- LightAction light2");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("position: TOP");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("red: 22");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("green: 24");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("blue: 31");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("- SoundAction sounda");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("set: (1,LONG,3),(1,MEDIUM,1),(2,LONG,2) ");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("# variables for notes");
      _builder_1.newLine();
      _builder_1.append("var notes[6]");
      _builder_1.newLine();
      _builder_1.append("var durations[6]");
      _builder_1.newLine();
      _builder_1.append("var note_index = 6");
      _builder_1.newLine();
      _builder_1.append("var note_count = 6");
      _builder_1.newLine();
      _builder_1.append("var wave[142]");
      _builder_1.newLine();
      _builder_1.append("var i");
      _builder_1.newLine();
      _builder_1.append("var wave_phase");
      _builder_1.newLine();
      _builder_1.append("var wave_intensity");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("# compute a sinus wave for sound");
      _builder_1.newLine();
      _builder_1.append("for i in 0:141 do");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("wave_phase = (i-70)*468");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("call math.cos(wave_intensity, wave_phase)");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("wave[i] = wave_intensity/256");
      _builder_1.newLine();
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.append("call sound.wave(wave)");
      _builder_1.newLine();
      _builder_1.append("# reset outputs");
      _builder_1.newLine();
      _builder_1.append("call sound.system(-1)");
      _builder_1.newLine();
      _builder_1.append("call leds.top(0,0,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.left(0,0,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.bottom.right(0,0,0)");
      _builder_1.newLine();
      _builder_1.append("call leds.circle(0,0,0,0,0,0,0,0)");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("# when a note is finished, play the next note");
      _builder_1.newLine();
      _builder_1.append("onevent sound.finished");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if note_index != note_count then");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("call sound.freq(notes[note_index], durations[note_index])");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("note_index += 1");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("end");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
