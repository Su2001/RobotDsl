/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.mydsl1.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import project2.RobotModel

@ExtendWith(InjectionExtension)
@InjectWith(MyDslInjectorProvider)
class RobotDslParsingTest {
	@Inject
	ParseHelper<RobotModel> parseHelper
	
	@Test
	def void loadValidModel() {
		val result = parseHelper.parse('''
			Condition:
				-Sensor sensor1
					sensorPosition 2
					detectObstacle NOOBSTACLE
				-Tap tap1
				-Sound sound1
				-Button leftcontidion CENTER
			Action:
				-MotorAction gofront motorLeft 200 motorRight 100+100
				-LightAction redLight position:TOP red:15 green:1 blue: 8
				- SoundAction playmusic set:(2, MEDIUM, 2), (5, MEDIUM, 4)
			Event event 
				conditions: sensor1 
				actions: playmusic
			Event e2
				conditions: tap1
				actions: redLight
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadInvalidModel() {
		val result = parseHelper.parse('''
			Condition:
				-Sensor sensor1
					sensorPosition 2
					detectObstacle NOOBSTACLE
				-Tap 
				-Sound sound1
				-Button leftcontidion CENTER
			Action:
				-MotorAction gofront motorLeft 200 motorRight 100+100
				-LightAction redLight position:TOP red:15 green:1 blue: 8
				- SoundAction playmusic set:(2, MEDIUM, 2), (5, MEDIUM, 4)
			Event event 
				conditions: sensor1 
				actions: playmusic
			Event e2
				conditions: tap1
				actions: redLight
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertFalse(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadNoAction() {
		val result = parseHelper.parse('''
			Condition:
				-Sensor sensor1
					sensorPosition 2
					detectObstacle NOOBSTACLE
				-Tap tap1
				-Sound sound1
				-Button leftcontidion CENTER
			Action:
				-MotorAction gofront motorLeft 200 motorRight 100+100
				-LightAction redLight position:TOP red:15 green:1 blue: 8
				- SoundAction playmusic set:(2, MEDIUM, 2), (5, MEDIUM, 4)
			Event event 
				conditions: sensor1 
			Event e2
				conditions: tap1
				actions: redLight
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertFalse(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadEventNoCondition() {
		val result = parseHelper.parse('''
			Condition:
				-Sensor sensor1
					sensorPosition 2
					detectObstacle NOOBSTACLE
				-Tap tap1
				-Sound sound1
				-Button leftcontidion CENTER
			Action:
				-MotorAction gofront motorLeft 200 motorRight 100+100
				-LightAction redLight position:TOP red:15 green:1 blue: 8
				- SoundAction playmusic set:(2, MEDIUM, 2), (5, MEDIUM, 4)
			Event e2
				actions: redLight
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertFalse(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadInvalidLightAction() {
		val result = parseHelper.parse('''
			Action:
				-LightAction redLight  red:15 green:1 blue: 8
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertFalse(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadInvalidSoundAction() {
		val result = parseHelper.parse('''
			Action:
				- SoundAction playmusic (2, MEDIUM, 2), (5, MEDIUM, 4)
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertFalse(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadInvalidMotorAction() {
		val result = parseHelper.parse('''
			Action:
				- MotorAction motorLeft 200 motorRight 100+100
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertFalse(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadInvalidSensorCondition() {
		val result = parseHelper.parse('''
			Condition:
				-Sensor sensor1
					detectObstacle NOOBSTACLE
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertFalse(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadInvalidTapAndSoundCondition() {
		val result = parseHelper.parse('''
			Condition:
				-Tap
				-Sound
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertFalse(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		Assertions.assertTrue(errors.size == 2, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadInvalidButtonCondition() {
		val result = parseHelper.parse('''
			Condition:
				-Button buttoncondition 2
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertFalse(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		Assertions.assertTrue(errors.size == 1, '''Unexpected errors: «errors.join(", ")»''')
	}
	
}
